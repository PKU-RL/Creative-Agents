{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Find a wood log block\n  const logBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    for (const logName of logNames) {\n      const log = bot.findBlock({\n        matching: mcData.blocksByName[logName].id,\n        maxDistance: 32\n      });\n      if (log) return log;\n    }\n    return null;\n  });\n  if (!logBlock) {\n    bot.chat(\"Could not find a wood log.\");\n    return;\n  }\n\n  // Mine the wood log block\n  await mineBlock(bot, logBlock.name, 1);\n  bot.chat(\"Wood log mined.\");\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a single wood log block. It searches for any of the seven types of wood logs within a certain distance. Once a wood log block is found, it is mined using the `mineBlock` function. If no wood log block is found, the function returns and a message is sent to the chat.\n}"}, "mineThreeMoreOakLogs": {"code": "async function mineThreeMoreOakLogs(bot) {\n  for (let i = 0; i < 3; i++) {\n    const oakLogBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const oakLog = bot.findBlock({\n        matching: mcData.blocksByName[\"oak_log\"].id,\n        maxDistance: 32\n      });\n      return oakLog;\n    });\n    if (!oakLogBlock) {\n      bot.chat(\"Could not find an oak log.\");\n      return;\n    }\n    await mineBlock(bot, \"oak_log\", 1);\n  }\n  bot.chat(\"3 more oak logs mined.\");\n}", "description": "async function mineThreeMoreOakLogs(bot) {\n    // The function is about mining three oak logs. It uses a for loop to mine three oak logs. It explores the environment until finding an oak log block, and then mines one oak log block. If it cannot find an oak log block, it returns. Once three oak logs are mined, it sends a chat message.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  // Check if there are enough oak logs in the inventory\n  const oakLogs = bot.inventory.count(mcData.itemsByName[\"oak_log\"].id);\n  if (oakLogs < 4) {\n    // Mine more oak logs\n    await mineBlock(bot, \"oak_log\", 4 - oakLogs);\n  }\n\n  // Craft a crafting table using oak logs\n  await craftItem(bot, \"crafting_table\", 1);\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft oak planks using oak logs\n  await craftItem(bot, \"oak_planks\", 4, craftingTablePosition);\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks, craftingTablePosition);\n  }\n\n  // Craft a wooden pickaxe using oak planks and sticks with the crafting table\n  await craftItem(bot, \"wooden_pickaxe\", 1, craftingTablePosition);\n  bot.chat(\"Wooden pickaxe crafted.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe using oak logs, oak planks, and sticks. It first checks if there are enough oak logs in the inventory, and if not, mines more. Then, it crafts a crafting table using oak logs and places it near the player. Next, it crafts oak planks using oak logs and checks if there are enough sticks in the inventory. If not, it crafts sticks using oak planks. Finally, it crafts a wooden pickaxe using oak planks and sticks with the crafting table.\n}"}, "craftWoodenSword": {"code": "async function craftWoodenSword(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.count(mcData.itemsByName[\"oak_planks\"].id);\n  if (oakPlanks < 2) {\n    // Craft more oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 2 - oakPlanks);\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 1) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 1 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden sword using oak planks and sticks with the crafting table\n  await craftItem(bot, \"wooden_sword\", 1, craftingTablePosition);\n  bot.chat(\"Wooden sword crafted.\");\n}", "description": "async function craftWoodenSword(bot) {\n    // The function crafts a wooden sword using oak planks and sticks. It checks if there are enough oak planks and sticks in the inventory, and crafts more if necessary. It then places a crafting table near the player and uses it to craft a wooden sword. Finally, it sends a chat message indicating that the wooden sword has been crafted.\n}"}, "mineEightCobblestone": {"code": "async function mineEightCobblestone(bot) {\n  // Equip the wooden pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n  await bot.equip(woodenPickaxe, \"hand\");\n\n  // Find stone blocks\n  const stoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const stone = bot.findBlock({\n      matching: mcData.blocksByName[\"stone\"].id,\n      maxDistance: 32\n    });\n    return stone;\n  });\n\n  // Mine 8 cobblestone\n  await mineBlock(bot, \"stone\", 8);\n  bot.chat(\"8 cobblestone mined.\");\n}", "description": "async function mineEightCobblestone(bot) {\n    // The function is about mining 8 cobblestones using a wooden pickaxe. It equips the wooden pickaxe and explores the environment until finding a stone block. Once a stone block is found, it mines a total of 8 cobblestone blocks using the wooden pickaxe. Finally, it sends a chat message indicating that 8 cobblestones have been mined.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 3) {\n    bot.chat(\"Not enough cobblestones to craft a stone pickaxe.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone pickaxe using cobblestones and sticks with the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1, craftingTablePosition);\n  bot.chat(\"Stone pickaxe crafted.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using cobblestones and sticks. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and uses it to craft a stone pickaxe.\n}"}, "mineFourCoalOre": {"code": "async function mineFourCoalOre(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find and mine 4 coal ore blocks\n  await mineBlock(bot, \"coal_ore\", 4);\n  bot.chat(\"4 coal ore mined.\");\n}", "description": "async function mineFourCoalOre(bot) {\n    // The function is about mining 4 coal ore blocks using a stone pickaxe. The function equips the stone pickaxe in the hand and then mines 4 coal ore blocks. Once the mining is complete, the function sends a chat message indicating that 4 coal ore blocks have been mined.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 8) {\n    bot.chat(\"Not enough cobblestones to craft a furnace.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a furnace using cobblestones and the crafting table\n  await craftItem(bot, \"furnace\", 1, craftingTablePosition);\n  bot.chat(\"Furnace crafted.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function crafts a furnace using cobblestones and a crafting table. It first checks if there are enough cobblestones in the inventory. If there are, it places a crafting table near the player and crafts a furnace using the cobblestones and the crafting table. Finally, it sends a chat message indicating that the furnace has been crafted.\n}"}, "mineThreeIronOre": {"code": "async function mineThreeIronOre(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find and mine 3 iron ore blocks\n  await mineBlock(bot, \"iron_ore\", 3);\n  bot.chat(\"3 iron ore mined.\");\n}", "description": "async function mineThreeIronOre(bot) {\n    // The function is about mining 3 iron ore blocks using a stone pickaxe. The function equips the stone pickaxe in the hand and then mines 3 iron ore blocks. Once the mining is complete, the function sends a chat message indicating that 3 iron ore blocks have been mined.\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 3 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n  bot.chat(\"3 raw iron smelted.\");\n}", "description": "async function smeltRawIron(bot) {\n    // The function is about smelting 3 raw iron using coal as fuel. First, find a suitable location to place the furnace. Then, place the furnace at the found location. Finally, smelt 3 raw iron using coal as fuel and save the event of smelting 3 raw iron.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 3) {\n    bot.chat(\"Not enough iron ingots to craft an iron pickaxe.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron pickaxe using iron ingots and sticks with the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1, craftingTablePosition);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe using iron ingots and sticks. It first checks if there are enough iron ingots and sticks in the inventory, and crafts more sticks if necessary. Then it places a crafting table near the player and uses it to craft an iron pickaxe. Finally, it sends a chat message indicating that the iron pickaxe has been crafted.\n}"}, "smeltCopperOre": {"code": "async function smeltCopperOre(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Find a copper ore block\n  const copperOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const copperOre = bot.findBlock({\n      matching: mcData.blocksByName[\"copper_ore\"].id,\n      maxDistance: 32\n    });\n    return copperOre;\n  });\n\n  // Mine the copper ore block\n  await mineBlock(bot, \"copper_ore\", 1);\n\n  // Smelt the raw copper using coal as fuel in the furnace\n  await smeltItem(bot, \"raw_copper\", \"coal\", 1);\n\n  // Collect the smelted copper ingot\n  bot.chat(\"1 copper ore smelted.\");\n}", "description": "async function smeltCopperOre(bot) {\n    // The function is about smelting one copper ore block into a copper ingot using a furnace and coal as fuel. First, check if there is a furnace in the inventory. If not, craft one using cobblestone. Then, place the furnace near the player. Next, explore the environment until finding a copper ore block. Once a copper ore block is found, mine it and smelt the raw copper using coal as fuel in the furnace. Finally, collect the smelted copper ingot.\n}"}, "smeltThreeRawCopper": {"code": "async function smeltThreeRawCopper(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 3 raw copper using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 3);\n  bot.chat(\"3 raw copper smelted.\");\n}", "description": "async function smeltThreeRawCopper(bot) {\n    // The function is about smelting 3 raw copper using a furnace and coal as fuel. First, it finds a suitable location to place the furnace. Then, it places the furnace at that location. Finally, it smelts 3 raw copper using coal as fuel and saves the event of smelting 3 raw copper.\n}"}, "craftStoneSword": {"code": "async function craftStoneSword(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 2) {\n    bot.chat(\"Not enough cobblestones to craft a stone sword.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 1) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 1 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone sword using cobblestones and sticks with the crafting table\n  await craftItem(bot, \"stone_sword\", 1, craftingTablePosition);\n  bot.chat(\"Stone sword crafted.\");\n}", "description": "async function craftStoneSword(bot) {\n    // The function crafts a stone sword using cobblestones and sticks. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough cobblestones, it returns. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and crafts a stone sword using the crafting table. Finally, it sends a chat message indicating that the stone sword has been crafted.\n}"}, "mineFiveCopperOre": {"code": "async function mineFiveCopperOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 copper ore blocks\n  const copperOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const copperOres = bot.findBlocks({\n      matching: mcData.blocksByName[\"copper_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return copperOres.length >= 5 ? copperOres : null;\n  });\n\n  // Mine the 5 copper ore blocks\n  await mineBlock(bot, \"copper_ore\", 5);\n  bot.chat(\"5 copper ore mined.\");\n}", "description": "async function mineFiveCopperOre(bot) {\n    // The function is about mining 5 copper ore blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 copper ore blocks. Once 5 copper ore blocks are found, mine them using the iron pickaxe and save the event of mining 5 copper ore.\n}"}, "smeltFiveRawCopper": {"code": "async function smeltFiveRawCopper(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 5 raw copper using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 5);\n  bot.chat(\"5 raw copper smelted.\");\n}", "description": "async function smeltFiveRawCopper(bot) {\n    // The function is about smelting 5 raw copper using a furnace and coal as fuel. First, it finds a suitable location to place the furnace. Then, it places the furnace at that location. Finally, it smelts 5 raw copper using coal as fuel and sends a chat message indicating that 5 raw copper has been smelted.\n}"}, "craftStoneShovel": {"code": "async function craftStoneShovel(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 1) {\n    bot.chat(\"Not enough cobblestones to craft a stone shovel.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone shovel using cobblestones and sticks with the crafting table\n  await craftItem(bot, \"stone_shovel\", 1, craftingTablePosition);\n  bot.chat(\"Stone shovel crafted.\");\n}", "description": "async function craftStoneShovel(bot) {\n    // The function crafts a stone shovel using cobblestones and sticks. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and uses it to craft a stone shovel. Finally, it sends a chat message indicating that the stone shovel has been crafted.\n}"}, "craftCopperBlock": {"code": "async function craftCopperBlock(bot) {\n  // Check if there are enough copper ingots in the inventory\n  const copperIngots = bot.inventory.count(mcData.itemsByName[\"copper_ingot\"].id);\n  if (copperIngots < 9) {\n    bot.chat(\"Not enough copper ingots to craft a copper block.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a copper block using copper ingots and the crafting table\n  await craftItem(bot, \"copper_block\", 1, craftingTablePosition);\n  bot.chat(\"Copper block crafted.\");\n}", "description": "async function craftCopperBlock(bot) {\n    // The function crafts a copper block using 9 copper ingots and a crafting table. It first checks if there are enough copper ingots in the inventory, and if not, it returns. Then, it places a crafting table near the player and crafts a copper block using the crafting table. Finally, it sends a chat message indicating that the copper block has been crafted.\n}"}, "killChickenWithIncreasedTime": {"code": "async function killChickenWithIncreasedTime(bot) {\n  // Explore the area to find a chicken with an increased exploration time limit\n  const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 120, () => {\n    const chicken = bot.nearestEntity(entity => {\n      return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return chicken;\n  });\n  if (!chicken) {\n    bot.chat(\"No chicken found.\");\n    return;\n  }\n\n  // Equip a weapon (preferably a sword) to kill the chicken\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Kill the chicken\n  await killMob(bot, \"chicken\", 300);\n\n  // Report the completion of the task\n  bot.chat(\"1 chicken killed.\");\n}", "description": "async function killChickenWithIncreasedTime(bot) {\n    // The function is about killing a chicken with an increased exploration time limit. It explores the area to find a chicken within a certain distance. If a chicken is found, it equips a sword (if available) to kill the chicken. Otherwise, it uses bare hands. After killing the chicken, it reports the completion of the task.\n}"}, "cookChicken": {"code": "async function cookChicken(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the raw chicken using coal as fuel in the furnace\n  await smeltItem(bot, \"chicken\", \"coal\", 1);\n\n  // Collect the cooked chicken\n  bot.chat(\"1 chicken cooked.\");\n}", "description": "async function cookChicken(bot) {\n    // The function is about cooking a raw chicken using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory. If not, it crafts one using cobblestone. Then, it places the furnace near the player. Next, it smelts the raw chicken using coal as fuel in the furnace. Finally, it collects the cooked chicken and sends a chat message.\n}"}, "killThreeCows": {"code": "async function killThreeCows(bot) {\n  // Explore the area to find 3 cows\n  let cows = [];\n  while (cows.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const nearbyCow = bot.nearestEntity(entity => {\n        return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      if (nearbyCow && !cows.includes(nearbyCow)) {\n        cows.push(nearbyCow);\n        return cows.length === 3 ? cows : null;\n      }\n      return null;\n    });\n  }\n\n  // Equip a weapon (preferably a sword) to kill the cows\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Kill each cow one by one\n  for (const cow of cows) {\n    await killMob(bot, cow.name, 300);\n  }\n\n  // Report the completion of the task\n  bot.chat(\"3 cows killed.\");\n}", "description": "async function killThreeCows(bot) {\n    // The function is about killing 3 cows. It explores the environment to find 3 cows within a certain distance. Once 3 cows are found, it equips a sword (if available) to kill the cows one by one. If no sword is found, it uses bare hands. After killing all 3 cows, it reports the completion of the task.\n}"}, "cookRawBeef": {"code": "async function cookRawBeef(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 6 raw beef using coal as fuel in the furnace\n  await smeltItem(bot, \"beef\", \"coal\", 6);\n\n  // Collect the cooked beef\n  bot.chat(\"6 raw beef cooked.\");\n}", "description": "async function cookRawBeef(bot) {\n    // The function is about cooking 6 raw beef using a furnace and coal as fuel. It first checks if there is a furnace in the inventory, and if not, crafts one using cobblestone. Then, it places the furnace near the player and smelts the 6 raw beef using coal as fuel in the furnace. Finally, it collects the cooked beef and sends a chat message.\n}"}, "eatCookedBeef": {"code": "async function eatCookedBeef(bot) {\n  // Equip a cooked beef in the bot's hand\n  const cookedBeef = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_beef\"].id);\n  await bot.equip(cookedBeef, \"hand\");\n\n  // Consume the cooked beef\n  await bot.consume();\n  bot.chat(\"1 cooked beef eaten.\");\n}", "description": "async function eatCookedBeef(bot) {\n    // The function is about making the bot eat a cooked beef. It equips a cooked beef in the bot's hand and then consumes it. Finally, it sends a message to the chat indicating that one cooked beef has been eaten.\n}"}, "killThreeChickens": {"code": "async function killThreeChickens(bot) {\n  // Equip a weapon (preferably a sword) to kill the chickens\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Explore the area to find 3 chickens\n  let chickens = [];\n  while (chickens.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const nearbyChicken = bot.nearestEntity(entity => {\n        return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      if (nearbyChicken && !chickens.includes(nearbyChicken)) {\n        chickens.push(nearbyChicken);\n        return chickens.length === 3 ? chickens : null;\n      }\n      return null;\n    });\n  }\n\n  // Kill each chicken one by one\n  for (const chicken of chickens) {\n    await killMob(bot, chicken.name, 300);\n  }\n\n  // Report the completion of the task\n  bot.chat(\"3 chickens killed.\");\n}", "description": "async function killThreeChickens(bot) {\n    // The function is about killing 3 chickens. First, it equips a sword to kill the chickens, and if there is no sword, it uses bare hands. Then, it explores the environment to find 3 chickens within a 32 block radius. Once 3 chickens are found, it kills each chicken one by one using the equipped weapon. Finally, it reports the completion of the task by sending a chat message.\n}"}, "killThreeSheep": {"code": "async function killThreeSheep(bot) {\n  // Equip a weapon (preferably a sword) to kill the sheep\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Explore the area to find 3 sheep\n  let sheep = [];\n  while (sheep.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const nearbySheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      if (nearbySheep && !sheep.includes(nearbySheep)) {\n        sheep.push(nearbySheep);\n        return sheep.length === 3 ? sheep : null;\n      }\n      return null;\n    });\n  }\n\n  // Kill each sheep one by one\n  for (const singleSheep of sheep) {\n    await killMob(bot, singleSheep.name, 300);\n  }\n\n  // Report the completion of the task\n  bot.chat(\"3 sheep killed.\");\n}", "description": "async function killThreeSheep(bot) {\n    // The function is about killing 3 sheep. First, it equips a weapon (preferably a sword) to kill the sheep. Then, it explores the environment to find 3 sheep. Once 3 sheep are found, it kills each sheep one by one. Finally, it reports the completion of the task by sending a chat message.\n}"}, "craftStoneAxe": {"code": "async function craftStoneAxe(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 3) {\n    bot.chat(\"Not enough cobblestones to craft a stone axe.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone axe using cobblestones and sticks with the crafting table\n  await craftItem(bot, \"stone_axe\", 1, craftingTablePosition);\n  bot.chat(\"Stone axe crafted.\");\n}", "description": "async function craftStoneAxe(bot) {\n    // The function crafts a stone axe using cobblestones and sticks. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and crafts a stone axe using the cobblestones and sticks with the crafting table. Finally, it sends a chat message indicating that the stone axe has been crafted.\n}"}, "cookThreeRawChicken": {"code": "async function cookThreeRawChicken(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 3 raw chicken using coal as fuel\n  await smeltItem(bot, \"chicken\", \"coal\", 3);\n  bot.chat(\"3 raw chicken cooked.\");\n}", "description": "async function cookThreeRawChicken(bot) {\n    // The function is about cooking 3 raw chicken using a furnace and coal as fuel. First, it finds a suitable location to place the furnace. Then, it places the furnace at that location. Finally, it smelts 3 raw chicken using coal as fuel and sends a chat message indicating that the chicken has been cooked.\n}"}, "craftStoneTools": {"code": "async function craftStoneTools(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 6) {\n    // Mine more cobblestones\n    await mineBlock(bot, \"stone\", 6 - cobblestones);\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 5) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 5 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone sword, a stone axe, and a stone shovel using the crafting table\n  await craftItem(bot, \"stone_sword\", 1, craftingTablePosition);\n  await craftItem(bot, \"stone_axe\", 1, craftingTablePosition);\n  await craftItem(bot, \"stone_shovel\", 1, craftingTablePosition);\n  bot.chat(\"Stone sword, stone axe, and stone shovel crafted.\");\n}", "description": "async function craftStoneTools(bot) {\n    // The function crafts stone tools (sword, axe, and shovel) using a crafting table. It checks if there are enough cobblestones and sticks in the inventory, and mines more cobblestones or crafts more sticks if necessary. Then, it places a crafting table near the player and crafts the stone tools using the crafting table. Finally, it sends a chat message indicating that the tools have been crafted.\n}"}, "cookRawMutton": {"code": "async function cookRawMutton(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 4 raw mutton using coal as fuel in the furnace\n  await smeltItem(bot, \"mutton\", \"coal\", 4);\n\n  // Collect the cooked mutton\n  bot.chat(\"4 raw mutton cooked.\");\n}", "description": "async function cookRawMutton(bot) {\n    // The function is about cooking 4 raw mutton using a furnace and coal as fuel. If there is no furnace in the inventory, the bot will craft one using cobblestone. Then, the bot will place the furnace near the player and smelt the 4 raw mutton using coal as fuel. Finally, the bot will collect the cooked mutton and print a message in the chat.\n}"}, "plantOakSapling": {"code": "async function plantOakSapling(bot) {\n  // Find a suitable location to plant the oak sapling\n  const targetBlock = bot.findBlock({\n    matching: block => {\n      return block.name === \"grass_block\" || block.name === \"dirt\";\n    },\n    maxDistance: 32\n  });\n  if (!targetBlock) {\n    bot.chat(\"Could not find a suitable location to plant the oak sapling.\");\n    return;\n  }\n\n  // Go to the location\n  await bot.pathfinder.goto(new GoalBlock(targetBlock.position.x, targetBlock.position.y, targetBlock.position.z));\n\n  // Equip the oak sapling in the bot's hand\n  const oakSapling = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_sapling\"].id);\n  await bot.equip(oakSapling, \"hand\");\n\n  // Right-click on the ground to plant the oak sapling\n  await bot.activateBlock(targetBlock);\n\n  // Send a chat message to indicate the oak sapling has been planted\n  bot.chat(\"Oak sapling planted.\");\n}", "description": "async function plantOakSapling(bot) {\n    // The function is about finding a suitable location to plant an oak sapling, going to that location, equipping the oak sapling in the bot's hand, right-clicking on the ground to plant the oak sapling, and sending a chat message to indicate the oak sapling has been planted. If a suitable location cannot be found, the function will return without planting the oak sapling.\n}"}, "craftStoneHoe": {"code": "async function craftStoneHoe(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 2) {\n    bot.chat(\"Not enough cobblestones to craft a stone hoe.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone hoe using cobblestones and sticks with the crafting table\n  await craftItem(bot, \"stone_hoe\", 1, craftingTablePosition);\n  bot.chat(\"Stone hoe crafted.\");\n}", "description": "async function craftStoneHoe(bot) {\n    // The function crafts a stone hoe using cobblestones and sticks. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and crafts a stone hoe using the cobblestones and sticks with the crafting table. Finally, it sends a chat message indicating that the stone hoe has been crafted.\n}"}, "craftTenCobblestoneWalls": {"code": "async function craftTenCobblestoneWalls(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 32) {\n    bot.chat(\"Not enough cobblestones to craft 10 cobblestone walls.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 6 cobblestone walls using the crafting table\n  await craftItem(bot, \"cobblestone_wall\", 1, craftingTablePosition);\n\n  // Craft 6 more cobblestone walls using the crafting table\n  await craftItem(bot, \"cobblestone_wall\", 1, craftingTablePosition);\n  bot.chat(\"10 cobblestone walls crafted.\");\n}", "description": "async function craftTenCobblestoneWalls(bot) {\n    // The function crafts 10 cobblestone walls using a crafting table. It first checks if there are enough cobblestones in the inventory, and if not, it returns. Then, it places a crafting table near the player and crafts 6 cobblestone walls using the crafting table. It repeats the process to craft 6 more cobblestone walls and outputs a message when the process is complete.\n}"}, "openChestAndCheckContents": {"code": "async function openChestAndCheckContents(bot) {\n  const targetChestPosition = new Vec3(5, 61, 134);\n\n  // Find the chest at the specified position\n  const chestPosition = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const chest = bot.findBlock({\n      matching: mcData.blocksByName[\"chest\"].id,\n      maxDistance: 32,\n      position: targetChestPosition\n    });\n    return chest ? chest.position : null;\n  });\n\n  // Check the contents of the chest\n  await checkItemInsideChest(bot, chestPosition);\n  bot.chat(\"Chest at (5, 61, 134) opened and contents checked.\");\n}", "description": "async function openChestAndCheckContents(bot) {\n    // The function is about finding a chest at a specified position, opening it, and checking its contents. It uses the `exploreUntil` helper function to find the chest and the `checkItemInsideChest` helper function to check the contents of the chest. The position of the chest is specified by `targetChestPosition`. Once the chest is found, the function checks its contents and sends a chat message indicating that the chest has been opened and its contents have been checked.\n}"}, "mineTenCobbledDeepslateBelowY0": {"code": "async function mineTenCobbledDeepslateBelowY0(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find cobbled_deepslate blocks below Y=0\n  const cobbledDeepslateBlocks = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    const cobbledDeepslate = bot.findBlock({\n      matching: mcData.blocksByName[\"cobbled_deepslate\"].id,\n      maxDistance: 32,\n      position: pos => pos.y < 0\n    });\n    return cobbledDeepslate;\n  });\n\n  // Mine 10 cobbled_deepslate blocks\n  await mineBlock(bot, \"cobbled_deepslate\", 10);\n  bot.chat(\"10 cobbled_deepslate mined below Y=0.\");\n}", "description": "async function mineTenCobbledDeepslateBelowY0(bot) {\n    // The function is about mining 10 cobbled_deepslate blocks below Y=0 using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding a cobbled_deepslate block below Y=0. Once 10 cobbled_deepslate blocks are found, mine them using the iron pickaxe. Finally, a message is sent to the chat indicating that 10 cobbled_deepslate blocks have been mined below Y=0.\n}"}, "mineDeepslateOres": {"code": "async function mineDeepslateOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find and mine 1 deepslate_redstone_ore\n  await mineBlock(bot, \"deepslate_redstone_ore\", 1);\n  bot.chat(\"1 deepslate_redstone_ore mined.\");\n\n  // Find and mine 1 deepslate_gold_ore\n  await mineBlock(bot, \"deepslate_gold_ore\", 1);\n  bot.chat(\"1 deepslate_gold_ore mined.\");\n}", "description": "async function mineDeepslateOres(bot) {\n    // The function is about mining 1 deepslate_redstone_ore and 1 deepslate_gold_ore using an iron pickaxe. The function first equips the iron pickaxe in the hand. Then, it finds and mines 1 deepslate_redstone_ore and 1 deepslate_gold_ore using the mineBlock function. Finally, it sends a chat message indicating the number of ores mined.\n}"}, "craftChest": {"code": "async function craftChest(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.count(mcData.itemsByName[\"oak_planks\"].id);\n  if (oakPlanks < 8) {\n    // Mine more oak logs\n    await mineBlock(bot, \"oak_log\", 8 - oakPlanks);\n    // Craft oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 8 - oakPlanks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a chest using oak planks with the crafting table\n  await craftItem(bot, \"chest\", 1, craftingTablePosition);\n  bot.chat(\"Chest crafted.\");\n}", "description": "async function craftChest(bot) {\n    // The function crafts a chest using oak planks. It checks if there are enough oak planks in the inventory, and if not, it mines oak logs and crafts oak planks. It then places a crafting table near the player and crafts a chest using oak planks with the crafting table. Finally, it sends a chat message indicating that the chest has been crafted.\n}"}, "smeltFiveRawGold": {"code": "async function smeltFiveRawGold(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 5 raw gold using coal as fuel in the furnace\n  await smeltItem(bot, \"raw_gold\", \"coal\", 5);\n\n  // Collect the smelted gold ingots\n  bot.chat(\"5 raw gold smelted.\");\n}", "description": "async function smeltFiveRawGold(bot) {\n    // The function is about smelting 5 raw gold into gold ingots using a furnace and coal as fuel. If there is no furnace in the inventory, the bot will craft one using cobblestone. Then, the bot will place the furnace near the player and smelt the 5 raw gold using coal as fuel. Finally, the bot will collect the smelted gold ingots and print a message in the chat.\n}"}, "craftClock": {"code": "async function craftClock(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If there is no crafting table, craft one using oak planks\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a clock using 4 gold ingots and 1 redstone dust with the crafting table\n  await craftItem(bot, \"clock\", 1, craftingTablePosition);\n  bot.chat(\"Clock crafted.\");\n}", "description": "async function craftClock(bot) {\n    // The function crafts a clock using 4 gold ingots and 1 redstone dust. It first checks if there is a crafting table in the inventory, and if not, crafts one using oak planks. Then, it places the crafting table near the player. Finally, it crafts a clock using the crafting table and saves the event of crafting a clock.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 2) {\n    bot.chat(\"Not enough iron ingots to craft an iron sword.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 1) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 1 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron sword using iron ingots and sticks with the crafting table\n  await craftItem(bot, \"iron_sword\", 1, craftingTablePosition);\n  bot.chat(\"Iron sword crafted.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword using iron ingots and sticks. It first checks if there are enough iron ingots and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and crafts an iron sword using the crafting table. Finally, it sends a chat message indicating that the iron sword has been crafted.\n}"}, "obtainBirchLogs": {"code": "async function obtainBirchLogs(bot) {\n  // Check if there are enough birch logs in the inventory\n  const birchLogs = bot.inventory.count(mcData.itemsByName[\"birch_log\"].id);\n  const logsNeeded = 5 - birchLogs;\n  if (logsNeeded > 0) {\n    // Mine the required number of birch logs\n    await mineBlock(bot, \"birch_log\", logsNeeded);\n    bot.chat(\"5 birch logs obtained.\");\n  } else {\n    bot.chat(\"Already have 5 birch logs in the inventory.\");\n  }\n}", "description": "async function obtainBirchLogs(bot) {\n    // The function is about obtaining 5 birch logs. It checks if there are enough birch logs in the inventory and mines the required number of birch logs if necessary. Once 5 birch logs are obtained, it sends a chat message. If there are already 5 birch logs in the inventory, it sends a different chat message.\n}"}, "mineFiveCoalOre": {"code": "async function mineFiveCoalOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 coal ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: mcData.blocksByName[\"coal_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n\n  // Mine the 5 coal ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ore mined.\");\n}", "description": "async function mineFiveCoalOre(bot) {\n    // The function is about mining 5 coal ore blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 coal ore blocks. Once 5 coal ore blocks are found, mine them using the iron pickaxe and save the event of mining 5 coal ore blocks.\n}"}, "craftShield": {"code": "async function craftShield(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.count(mcData.itemsByName[\"oak_planks\"].id);\n  if (oakPlanks < 6) {\n    // Craft more oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 6 - oakPlanks);\n  }\n\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 1) {\n    bot.chat(\"Not enough iron ingots to craft a shield.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a shield using oak planks and iron ingots with the crafting table\n  await craftItem(bot, \"shield\", 1, craftingTablePosition);\n  bot.chat(\"Shield crafted.\");\n}", "description": "async function craftShield(bot) {\n    // The function crafts a shield using oak planks and iron ingots. It checks if there are enough oak planks and iron ingots in the inventory, and crafts more oak planks if necessary. If there are not enough iron ingots, it returns. It then places a crafting table near the player and crafts a shield using the crafting table. Finally, it sends a chat message indicating that the shield has been crafted.\n}"}, "craftDiamondSword": {"code": "async function craftDiamondSword(bot) {\n  // Check if there are enough diamonds in the inventory\n  const diamonds = bot.inventory.count(mcData.itemsByName[\"diamond\"].id);\n  if (diamonds < 2) {\n    bot.chat(\"Not enough diamonds to craft a diamond sword.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 1) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 1 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a diamond sword using diamonds and sticks with the crafting table\n  await craftItem(bot, \"diamond_sword\", 1, craftingTablePosition);\n  bot.chat(\"Diamond sword crafted.\");\n}", "description": "async function craftDiamondSword(bot) {\n    // The function crafts a diamond sword using diamonds and sticks. It first checks if there are enough diamonds and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and uses it to craft a diamond sword. Finally, it sends a chat message indicating that the diamond sword has been crafted.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 5) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 5 - ironIngots);\n\n    // Place a furnace near the player\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"furnace\", furnacePosition);\n\n    // Smelt iron ores into iron ingots\n    for (let i = 0; i < 5 - ironIngots; i++) {\n      await smeltItem(bot, \"raw_iron\", \"coal\");\n    }\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron helmet using iron ingots and the crafting table\n  await craftItem(bot, \"iron_helmet\", 1, craftingTablePosition);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet using iron ingots and a crafting table. It first checks if there are enough iron ingots in the inventory, and if not, it mines iron ores, places a furnace, and smelts the ores into ingots. Then it places a crafting table near the player and crafts an iron helmet using the ingots and the crafting table. Finally, it sends a chat message indicating that the iron helmet has been crafted.\n}"}, "equipIronHelmet": {"code": "async function equipIronHelmet(bot) {\n  // Find the iron helmet in the bot's inventory\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_helmet\"].id);\n\n  // Equip the iron helmet in the head slot\n  await bot.equip(ironHelmet, \"head\");\n  bot.chat(\"Iron helmet equipped.\");\n}", "description": "async function equipIronHelmet(bot) {\n    // The function is about equipping an iron helmet in the head slot of the bot's inventory. It first finds the iron helmet in the bot's inventory and then equips it in the head slot. Finally, it sends a chat message confirming that the iron helmet has been equipped.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 8) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 8 - ironIngots);\n\n    // Place a furnace near the player\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"furnace\", furnacePosition);\n\n    // Smelt iron ores into iron ingots\n    for (let i = 0; i < 8 - ironIngots; i++) {\n      await smeltItem(bot, \"raw_iron\", \"coal\");\n    }\n  }\n\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Try to place the crafting table near the player at different positions until it is successfully placed\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  let craftingTablePosition = null;\n  for (const offset of offsets) {\n    try {\n      craftingTablePosition = bot.entity.position.offset(offset.x, offset.y, offset.z);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      break;\n    } catch (error) {\n      console.log(\"Error placing crafting_table:\", error.message);\n    }\n  }\n  if (!craftingTablePosition) {\n    bot.chat(\"Failed to place crafting table. Please try again.\");\n    return;\n  }\n\n  // Craft an iron chestplate using iron ingots and the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1, craftingTablePosition);\n  bot.chat(\"Iron chestplate crafted.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate using iron ingots and a crafting table. It first checks if there are enough iron ingots in the inventory, and if not, it mines iron ores, places a furnace, and smelts the ores into ingots. Then it checks if there is a crafting table in the inventory, and if not, it crafts one. Next, it tries to place the crafting table near the player at different positions until it is successfully placed. Finally, it crafts an iron chestplate using the iron ingots and the crafting table.\n}"}, "equipShield": {"code": "async function equipShield(bot) {\n  // Find the shield in the bot's inventory\n  const shield = bot.inventory.findInventoryItem(mcData.itemsByName[\"shield\"].id);\n\n  // Equip the shield in the off-hand slot\n  await bot.equip(shield, \"off-hand\");\n  bot.chat(\"Shield equipped.\");\n}", "description": "async function equipShield(bot) {\n    // The function equips a shield in the off-hand slot of the bot's inventory. It first finds the shield in the bot's inventory and then equips it in the off-hand slot. Finally, it sends a chat message confirming that the shield has been equipped.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Find the iron chestplate in the bot's inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_chestplate\"].id);\n\n  // Equip the iron chestplate in the torso slot\n  await bot.equip(ironChestplate, \"torso\");\n  bot.chat(\"Iron chestplate equipped.\");\n}", "description": "async function equipIronChestplate(bot) {\n    // The function equips an iron chestplate in the torso slot of the bot's armor. It first finds the iron chestplate in the bot's inventory and then equips it using the `bot.equip` function. Finally, it sends a chat message confirming that the iron chestplate has been equipped.\n}"}, "craftIronLeggingsAndBoots": {"code": "async function craftIronLeggingsAndBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 11) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 11 - ironIngots);\n\n    // Check if there are enough coal in the inventory\n    const coalCount = bot.inventory.count(mcData.itemsByName[\"coal\"].id);\n    if (coalCount < 11 - ironIngots) {\n      // Mine coal\n      await mineBlock(bot, \"coal_ore\", 11 - ironIngots - coalCount);\n    }\n\n    // Place a furnace near the player\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"furnace\", furnacePosition);\n\n    // Smelt iron ores into iron ingots\n    for (let i = 0; i < 11 - ironIngots; i++) {\n      await smeltItem(bot, \"raw_iron\", \"coal\");\n    }\n  }\n\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n\n  // Craft iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron leggings and iron boots crafted.\");\n}", "description": "async function craftIronLeggingsAndBoots(bot) {\n    // The function crafts iron leggings and boots. It checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and coal to smelt them into iron ingots. It then checks if there is a crafting table in the inventory, and if not, it crafts one. The function places the crafting table and a furnace near the player, and uses the furnace to smelt the iron ores. Finally, it crafts iron leggings and boots using the crafting table.\n}"}, "equipIronLeggingsAndBoots": {"code": "async function equipIronLeggingsAndBoots(bot) {\n  // Find the iron leggings and iron boots in the bot's inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_leggings\"].id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_boots\"].id);\n\n  // Check if the bot has iron leggings and iron boots\n  if (ironLeggings && ironBoots) {\n    // Equip the iron leggings in the legs slot\n    await bot.equip(ironLeggings, \"legs\");\n\n    // Equip the iron boots in the feet slot\n    await bot.equip(ironBoots, \"feet\");\n\n    // Send a chat message to indicate that the iron leggings and iron boots have been equipped\n    bot.chat(\"Iron leggings and iron boots equipped.\");\n  } else {\n    bot.chat(\"Iron leggings and/or iron boots not found in inventory.\");\n  }\n}", "description": "async function equipIronLeggingsAndBoots(bot) {\n    // The function equips the bot with iron leggings and iron boots if they are available in the inventory, and sends a chat message indicating that they have been equipped. If the items are not found in the inventory, it sends a chat message indicating that they were not found.\n}"}, "waitAndEatCookedMutton": {"code": "async function waitAndEatCookedMutton(bot) {\n  // Wait until the bot's hunger is less than 20\n  while (bot.food >= 20) {\n    await bot.waitForTicks(20);\n  }\n\n  // Equip a cooked mutton in the bot's hand\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_mutton\"].id);\n  await bot.equip(cookedMutton, \"hand\");\n\n  // Consume the cooked mutton\n  await bot.consume();\n  bot.chat(\"1 cooked mutton eaten.\");\n}", "description": "async function waitAndEatCookedMutton(bot) {\n    // The function waits until the bot's hunger is less than 20, equips a cooked mutton in the bot's hand, consumes it, and then sends a chat message indicating that 1 cooked mutton has been eaten.\n}"}, "eatCookedMuttonIfHungry": {"code": "async function eatCookedMuttonIfHungry(bot) {\n  // Check if the bot's hunger is less than 20\n  if (bot.food < 20) {\n    // Equip the cooked mutton in the bot's hand\n    const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_mutton\"].id);\n    await bot.equip(cookedMutton, \"hand\");\n\n    // Consume the cooked mutton\n    await bot.consume();\n    bot.chat(\"1 cooked mutton eaten.\");\n  } else {\n    bot.chat(\"Hunger is full, no need to eat cooked mutton.\");\n  }\n}", "description": "async function eatCookedMuttonIfHungry(bot) {\n    // The function checks if the bot's hunger is less than 20, and if so, equips and consumes a cooked mutton to restore hunger. If the hunger is already full, it will not eat the cooked mutton.\n}"}, "eatCookedMutton": {"code": "async function eatCookedMutton(bot) {\n  // Equip a cooked mutton in the bot's hand\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_mutton\"].id);\n  await bot.equip(cookedMutton, \"hand\");\n\n  // Consume the cooked mutton\n  await bot.consume();\n  bot.chat(\"1 cooked mutton eaten.\");\n}", "description": "async function eatCookedMutton(bot) {\n    // The function is about making the bot eat a cooked mutton. First, it equips a cooked mutton in the bot's hand. Then, it consumes the cooked mutton and sends a chat message indicating that 1 cooked mutton has been eaten.\n}"}, "craftBirchBoat": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const blockBelow = bot.blockAt(position.offset(0, -1, 0));\n    if (blockBelow && blockBelow.name !== \"air\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftBirchBoat(bot) {\n  // Check if there are enough birch logs in the inventory\n  const birchLogs = bot.inventory.count(mcData.itemsByName[\"birch_log\"].id);\n  if (birchLogs < 5) {\n    // Mine more birch logs\n    await mineBlock(bot, \"birch_log\", 5 - birchLogs);\n  }\n\n  // Craft birch planks using birch logs\n  await craftItem(bot, \"birch_planks\", 5);\n\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Find a suitable position to place the crafting table\n  const craftingTablePosition = await findSuitablePosition(bot);\n  if (!craftingTablePosition) {\n    bot.chat(\"Failed to find a suitable position to place the crafting table. Please try again.\");\n    return;\n  }\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a birch boat using birch planks and the crafting table\n  await craftItem(bot, \"birch_boat\", 1, craftingTablePosition);\n  bot.chat(\"Birch boat crafted.\");\n}", "description": "async function craftBirchBoat(bot) {\n    // The function crafts a birch boat using birch logs and a crafting table. It first checks if there are enough birch logs in the inventory, and if not, mines more. Then, it crafts birch planks using the birch logs. If there is no crafting table in the inventory, it crafts one. It finds a suitable position to place the crafting table and places it there. Finally, it crafts a birch boat using the birch planks and the crafting table.\n}"}, "craftBoneMeal": {"code": "async function craftBoneMeal(bot) {\n  // Check if there are enough bones in the inventory\n  const bones = bot.inventory.count(mcData.itemsByName[\"bone\"].id);\n  if (bones < 2) {\n    bot.chat(\"Not enough bones to craft 4 bone meal.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 4 bone meal using 2 bones and the crafting table\n  await craftItem(bot, \"bone_meal\", 2, craftingTablePosition);\n  bot.chat(\"4 bone meal crafted.\");\n}", "description": "async function craftBoneMeal(bot) {\n    // The function is about crafting 4 bone meal using 2 bones and a crafting table. It first checks if there are enough bones in the inventory, and if not, it returns. Then, it places a crafting table near the player using the `placeItem` helper function. Finally, it crafts 4 bone meal using 2 bones and the crafting table, and sends a chat message indicating that the bone meal has been crafted.\n}"}}