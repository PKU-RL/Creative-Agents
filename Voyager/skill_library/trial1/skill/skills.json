{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const woodLogNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Find a wood log block\n  const woodLogBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    return bot.findBlock({\n      matching: block => woodLogNames.includes(block.name),\n      maxDistance: 32\n    });\n  });\n  if (!woodLogBlock) {\n    bot.chat(\"Could not find a wood log.\");\n    return;\n  }\n\n  // Mine the wood log block\n  await mineBlock(bot, woodLogBlock.name, 1);\n  bot.chat(\"Wood log mined.\");\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a single wood log block. It searches for a wood log block by exploring the environment until it finds one of the seven types of wood logs. If a wood log block is found, it is mined and a success message is sent. If no wood log block is found, a failure message is sent.\n}"}, "mineThreeMoreOakLogs": {"code": "async function mineThreeMoreOakLogs(bot) {\n  // Check the initial inventory for oak logs\n  const initialOakLogs = bot.inventory.count(mcData.itemsByName.oak_log.id);\n\n  // Find 3 oak_log blocks\n  const oakLogs = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const oakLogs = bot.findBlocks({\n      matching: block => block.name === \"oak_log\",\n      maxDistance: 32,\n      count: 3\n    });\n    return oakLogs.length >= 3 ? oakLogs : null;\n  });\n  if (!oakLogs) {\n    bot.chat(\"Could not find enough oak logs.\");\n    return;\n  }\n\n  // Mine the oak_log blocks\n  await mineBlock(bot, \"oak_log\", 3);\n  bot.chat(\"3 oak logs mined.\");\n\n  // Compare the final inventory with the initial inventory\n  const finalOakLogs = bot.inventory.count(mcData.itemsByName.oak_log.id);\n  if (finalOakLogs - initialOakLogs === 3) {\n    bot.chat(\"Successfully mined 3 more oak logs.\");\n  } else {\n    bot.chat(\"Failed to mine 3 more oak logs.\");\n  }\n}", "description": "async function mineThreeMoreOakLogs(bot) {\n    // The function is about mining 3 oak logs. It first checks the initial inventory for oak logs. Then, it explores the environment until it finds 3 oak log blocks. If it cannot find enough oak logs, it returns. Otherwise, it mines the oak log blocks and compares the final inventory with the initial inventory to determine if it successfully mined 3 more oak logs.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 4) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((4 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Craft a crafting table using oak planks\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}", "description": "async function craftCraftingTable(bot) {\n    // The function crafts a crafting table using oak planks. It first checks if there are enough oak planks in the inventory, and if not, crafts oak planks from oak logs. Then, it crafts a crafting table using the oak planks.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(\n    mcData.itemsByName.crafting_table.id\n  );\n\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 6) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((6 - oakPlanksCount) / 4);\n    if (oakLogsCount < planksToCraft) {\n      await mineBlock(bot, \"oak_log\", planksToCraft - oakLogsCount);\n    }\n    await craftItem(bot, \"oak_planks\", planksToCraft);\n    bot.chat(\"Crafted oak planks.\");\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden pickaxe using the crafting table\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Crafted a wooden pickaxe.\");\n}\n", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe using oak planks, sticks, and a crafting table. It checks if there are enough oak planks and sticks in the inventory, and crafts them if necessary. Then, it places a crafting table near the bot and uses it to craft a wooden pickaxe.\n}"}, "craftWoodenSword": {"code": "async function craftWoodenSword(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 2) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((2 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 1) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden sword using the crafting table\n  await craftItem(bot, \"wooden_sword\", 1);\n  bot.chat(\"Crafted a wooden sword.\");\n}", "description": "async function craftWoodenSword(bot) {\n    // The function crafts a wooden sword using oak planks, sticks, and a crafting table. It checks if there are enough oak planks and sticks in the inventory, and crafts them if necessary. Then, it places a crafting table near the bot and uses it to craft a wooden sword.\n}"}, "killOnePig": {"code": "async function killOnePig(bot) {\n  // Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  await bot.equip(woodenSword, \"hand\");\n\n  // Find the nearest pig\n  const pig = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const pig = bot.nearestEntity(entity => {\n      return entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return pig;\n  });\n  if (!pig) {\n    bot.chat(\"Could not find a pig.\");\n    return;\n  }\n\n  // Kill the pig using the wooden sword\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed a pig.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(pig.position.x, pig.position.y, pig.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOnePig(bot) {\n    // The function is about killing a pig using a wooden sword and collecting the dropped items. First, equip the wooden sword in the hand. Next, explore the environment until finding the nearest pig within 32 blocks. Once a pig is found, kill it using the wooden sword and collect the dropped items by moving to the pig's position.\n}"}, "killFourSheep": {"code": "async function killFourSheep(bot) {\n  // Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  await bot.equip(woodenSword, \"hand\");\n\n  // Find and kill the first three sheep\n  for (let i = 1; i <= 3; i++) {\n    await killMob(bot, \"sheep\", 300);\n    bot.chat(`Killed sheep ${i}.`);\n  }\n\n  // Find and kill the fourth sheep\n  await killMob(bot, \"sheep\", 300);\n  bot.chat(\"Killed the fourth sheep.\");\n\n  // Collect the dropped items from the killed sheep\n  const sheepDrops = [\"wool\", \"raw_mutton\"];\n  for (const drop of sheepDrops) {\n    const droppedItem = bot.findBlock({\n      matching: block => block.name === drop,\n      maxDistance: 32\n    });\n    if (droppedItem) {\n      await bot.pathfinder.goto(new GoalBlock(droppedItem.position.x, droppedItem.position.y, droppedItem.position.z));\n    }\n  }\n  bot.chat(\"Collected dropped items from the killed sheep.\");\n}", "description": "async function killFourSheep(bot) {\n    // The function is about killing four sheep and collecting their drops. It equips a wooden sword and kills the first three sheep, then kills the fourth sheep. After that, it collects the dropped items from the killed sheep, which include wool and raw mutton.\n}"}, "craftOakPlanksAndSticks": {"code": "async function craftOakPlanksAndSticks(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 8) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((8 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 4) {\n    await craftItem(bot, \"stick\", 2);\n    bot.chat(\"Crafted sticks.\");\n  }\n}", "description": "async function craftOakPlanksAndSticks(bot) {\n    // The function checks if there are enough oak planks and sticks in the inventory, and crafts them if necessary. If there are not enough oak planks, it crafts them from oak logs. If there are not enough sticks, it crafts them from oak planks.\n}"}, "mineFiveCoalOres": {"code": "async function mineFiveCoalOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find 5 coal_ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: block => block.name === \"coal_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n  if (!coalOres) {\n    bot.chat(\"Could not find enough coal ores.\");\n    return;\n  }\n\n  // Mine the 5 coal_ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}", "description": "async function mineFiveCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, equip the stone pickaxe in the hand. Next, explore the environment until finding 5 coal_ore blocks. Once 5 coal_ore blocks are found, mine them using the stone pickaxe.\n}"}, "mineTenCobblestone": {"code": "async function mineTenCobblestone(bot) {\n  // Check if the bot has a pickaxe in the inventory\n  const pickaxe = bot.inventory.items().find(item => item.name.endsWith(\"_pickaxe\"));\n\n  // If not, craft a wooden pickaxe using the available resources in the inventory\n  if (!pickaxe) {\n    await craftWoodenPickaxe(bot);\n  } else {\n    // Equip the pickaxe\n    await bot.equip(pickaxe, \"hand\");\n  }\n\n  // Use the exploreUntil function to find cobblestone blocks\n  const cobblestoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const cobblestoneBlocks = bot.findBlocks({\n      matching: block => block.name === \"stone\",\n      maxDistance: 32,\n      count: 10\n    });\n    return cobblestoneBlocks.length >= 10 ? cobblestoneBlocks : null;\n  });\n  if (!cobblestoneBlocks) {\n    bot.chat(\"Could not find enough cobblestone.\");\n    return;\n  }\n\n  // Mine 10 cobblestone blocks using the mineBlock function\n  await mineBlock(bot, \"stone\", 10);\n  bot.chat(\"10 cobblestone mined.\");\n}", "description": "async function mineTenCobblestone(bot) {\n    // The function is about mining 10 cobblestones using a pickaxe. First, check if the bot has a pickaxe in the inventory. If not, craft a wooden pickaxe using the available resources in the inventory. If the pickaxe is available, equip the pickaxe in the hand. Next, use the exploreUntil function to find cobblestone blocks. Once 10 cobblestone blocks are found, mine them using the mineBlock function.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough cobblestone or sticks, collect the required items\n  if (cobblestoneCount < 3) {\n    await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone pickaxe using the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using cobblestone and sticks. It checks if there are enough cobblestone and sticks in the inventory, and if not, it collects the required items. Then, it places a crafting table near the bot and crafts a stone pickaxe using the crafting table.\n}"}, "mineFiveIronOres": {"code": "async function mineFiveIronOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find 5 iron_ore blocks\n  const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const ironOres = bot.findBlocks({\n      matching: block => block.name === \"iron_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return ironOres.length >= 5 ? ironOres : null;\n  });\n  if (!ironOres) {\n    bot.chat(\"Could not find enough iron ores.\");\n    return;\n  }\n\n  // Mine the 5 iron_ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}", "description": "async function mineFiveIronOres(bot) {\n    // The function is about mining 5 iron ores using a stone pickaxe. First, equip the stone pickaxe in the hand. Next, explore the environment until finding 5 iron_ore blocks. Once 5 iron_ore blocks are found, mine them using the stone pickaxe.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n\n  // If not, mine the required cobblestones\n  if (cobblestoneCount < 8) {\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a furnace using the crafting table\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Crafted a furnace.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function crafts a furnace using a crafting table and cobblestones. If there are not enough cobblestones in the inventory, it mines the required amount. Then, it places a crafting table near the bot and crafts a furnace using the crafting table. Finally, it sends a chat message indicating that a furnace has been crafted.\n}"}, "smeltFiveRawIron": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      return position;\n    }\n  }\n  return null;\n}\nasync function smeltFiveRawIron(bot) {\n  // Check if there is coal in the inventory\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n\n  // If not enough coal, mine coal_ore to obtain coal\n  if (coalCount < 3) {\n    await mineBlock(bot, \"coal_ore\", 3 - coalCount);\n    bot.chat(\"Collected coal.\");\n  }\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n  // Smelt 5 raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron smelted.\");\n}", "description": "async function smeltFiveRawIron(bot) {\n    // The function is about smelting 5 raw iron using a furnace and coal as fuel. If there is no furnace in the inventory, craft one using cobblestone. Find a suitable position to place the furnace and place it there. Then, smelt 5 raw iron using the available coal as fuel.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 3 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron pickaxe using the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, collects the required items. It then places a crafting table near the bot and crafts an iron pickaxe using the crafting table.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 2) {\n    await mineBlock(bot, \"iron_ore\", 2 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 2 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  if (sticksCount < 1) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron sword using the crafting table\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Crafted an iron sword.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, it collects the required items. It then places a crafting table near the bot and crafts an iron sword using the crafting table.\n}"}, "cookPorkchops": {"code": "async function cookPorkchops(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Place the furnace near the bot\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 2 porkchops using the available coal as fuel\n  await smeltItem(bot, \"porkchop\", \"coal\", 2);\n  bot.chat(\"2 porkchops cooked.\");\n}", "description": "async function cookPorkchops(bot) {\n    // The function is about cooking 2 porkchops using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory. If not, it crafts a furnace using cobblestone. Then, it places the furnace near the bot. Finally, it smelts 2 porkchops using coal as fuel and saves the event of cooking porkchops.\n}"}, "mineFiveLapisLazuliOres": {"code": "async function mineFiveLapisLazuliOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 lapis_lazuli_ore blocks\n  const lapisOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    const lapisOres = bot.findBlocks({\n      matching: block => block.name === \"lapis_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return lapisOres.length >= 5 ? lapisOres : null;\n  });\n  if (!lapisOres) {\n    bot.chat(\"Could not find enough lapis lazuli ores.\");\n    return;\n  }\n\n  // Mine the 5 lapis_lazuli_ore blocks\n  await mineBlock(bot, \"lapis_ore\", 5);\n  bot.chat(\"5 lapis lazuli ores mined.\");\n}", "description": "async function mineFiveLapisLazuliOres(bot) {\n    // The function is about mining 5 lapis lazuli ores using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 lapis lazuli ore blocks. Once 5 lapis lazuli ore blocks are found, mine them using the iron pickaxe.\n}"}, "craftIronAxe": {"code": "async function craftIronAxe(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 3 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron axe using the crafting table\n  await craftItem(bot, \"iron_axe\", 1);\n  bot.chat(\"Crafted an iron axe.\");\n}", "description": "async function craftIronAxe(bot) {\n    // The function crafts an iron axe using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, collects the required items. It then places a crafting table near the bot and crafts an iron axe using the crafting table.\n}"}, "craftStoneShovel": {"code": "async function craftStoneShovel(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough cobblestone, mine cobblestone\n  if (cobblestoneCount < 1) {\n    await mineBlock(bot, \"stone\", 1);\n    bot.chat(\"Collected cobblestone.\");\n  }\n\n  // If not enough sticks, craft sticks\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone shovel using the crafting table\n  await craftItem(bot, \"stone_shovel\", 1);\n  bot.chat(\"Crafted a stone shovel.\");\n}", "description": "async function craftStoneShovel(bot) {\n    // The function crafts a stone shovel using cobblestone and sticks. It checks if there are enough cobblestone and sticks in the inventory, and if not, it mines cobblestone or crafts sticks. Then, it places a crafting table near the bot and crafts a stone shovel using the crafting table. Finally, it sends a chat message indicating that a stone shovel has been crafted.\n}"}, "cookSevenMutton": {"code": "async function cookSevenMutton(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 7 raw mutton using the available coal as fuel\n  await smeltItem(bot, \"mutton\", \"coal\", 7);\n  bot.chat(\"7 mutton cooked.\");\n}", "description": "async function cookSevenMutton(bot) {\n    // The function is about cooking 7 raw mutton using a furnace and coal as fuel. It checks if there is a furnace in the inventory, and if not, it crafts one. Then it finds a suitable position to place the furnace and places it there. After that, it smelts 7 raw mutton using the available coal as fuel and saves the event of cooking 7 mutton.\n}"}, "killTwoPigs": {"code": "async function killTwoPigs(bot) {\n  // Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  await bot.equip(woodenSword, \"hand\");\n\n  // Find and kill the first pig\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed the first pig.\");\n\n  // Find and kill the second pig\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed the second pig.\");\n\n  // Collect the dropped items from the killed pigs\n  const pigDrops = [\"raw_porkchop\"];\n  for (const drop of pigDrops) {\n    const droppedItem = bot.findBlock({\n      matching: block => block.name === drop,\n      maxDistance: 32\n    });\n    if (droppedItem) {\n      await bot.pathfinder.goto(new GoalBlock(droppedItem.position.x, droppedItem.position.y, droppedItem.position.z));\n    }\n  }\n  bot.chat(\"Collected dropped items from the killed pigs.\");\n}", "description": "async function killTwoPigs(bot) {\n    // The function is about killing two pigs and collecting their dropped items. The function equips a wooden sword and kills two pigs using the `killMob` function. After killing each pig, the function logs a message. Then, the function searches for dropped items from the killed pigs and collects them using the `pathfinder` module. Finally, the function logs a message indicating that the items have been collected.\n}"}, "eatCookedPorkchop": {"code": "async function eatCookedPorkchop(bot) {\n  // Equip the cooked porkchop in the bot's hand\n  const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n  await bot.equip(cookedPorkchop, \"hand\");\n\n  // Consume the cooked porkchop\n  await bot.consume();\n\n  // Send a chat message to indicate the task is completed\n  bot.chat(\"Ate 1 cooked porkchop.\");\n}", "description": "async function eatCookedPorkchop(bot) {\n    // The function is about eating a cooked porkchop. It equips the cooked porkchop in the bot's hand, consumes it, and sends a chat message to indicate the task is completed.\n}"}, "craftWoodenHoe": {"code": "async function craftWoodenHoe(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 2) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((2 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden hoe using the crafting table\n  await craftItem(bot, \"wooden_hoe\", 1);\n  bot.chat(\"Crafted a wooden hoe.\");\n}", "description": "async function craftWoodenHoe(bot) {\n    // The function crafts a wooden hoe using oak planks and sticks. If there are not enough oak planks, it crafts them from oak logs. If there are not enough sticks, it crafts them from oak planks. Then, it places a crafting table near the bot and uses it to craft a wooden hoe.\n}"}, "craftWhiteBed": {"code": "async function craftWhiteBed(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 3) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((3 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough white wool in the inventory\n  const whiteWoolCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n  if (whiteWoolCount < 3) {\n    bot.chat(\"Not enough white wool to craft a bed.\");\n    return;\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a white bed using the crafting table\n  await craftItem(bot, \"white_bed\", 1);\n  bot.chat(\"Crafted a white bed.\");\n}", "description": "async function craftWhiteBed(bot) {\n    // The function crafts a white bed using oak planks and white wool. If there are not enough oak planks in the inventory, it crafts oak planks from oak logs. If there are not enough white wool in the inventory, it stops the function. Then, it places a crafting table near the bot and crafts a white bed using the crafting table.\n}"}, "killOneEnderman": {"code": "async function killOneEnderman(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest enderman\n  const enderman = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const enderman = bot.nearestEntity(entity => {\n      return entity.name === \"enderman\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return enderman;\n  });\n  if (!enderman) {\n    bot.chat(\"Could not find an enderman.\");\n    return;\n  }\n\n  // Kill the enderman using the iron sword\n  await killMob(bot, \"enderman\", 300);\n  bot.chat(\"Killed an enderman.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(enderman.position.x, enderman.position.y, enderman.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOneEnderman(bot) {\n    // The function is about killing one enderman using an iron sword. First, equip the iron sword in the hand. Next, explore the environment until finding the nearest enderman within 32 blocks. Once an enderman is found, kill it using the iron sword. After killing the enderman, collect the dropped items by moving to the enderman's position.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 8) {\n    await mineBlock(bot, \"iron_ore\", 8 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 8 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron chestplate using the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Crafted an iron chestplate.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate using a crafting table. It first checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them into iron ingots. Then it places a crafting table near the bot and crafts an iron chestplate using the crafting table.\n}"}, "mineFiveCopperOres": {"code": "async function mineFiveCopperOres(bot) {\n  // Check if the bot already has 5 or more copper ores in the inventory\n  const copperOres = bot.inventory.items().filter(item => item.name === \"copper_ore\");\n  const totalCopperOres = copperOres.reduce((total, item) => total + item.count, 0);\n  if (totalCopperOres >= 5) {\n    bot.chat(\"Task already completed. There are already \" + totalCopperOres + \" copper ores in the inventory.\");\n  } else {\n    bot.chat(\"Need to mine \" + (5 - totalCopperOres) + \" more copper ores.\");\n    // You can call the mineFiveCopperOres function from the previous response here\n  }\n}", "description": "async function mineFiveCopperOres(bot) {\n    // The function checks if the bot already has 5 or more copper ores in the inventory. If not, it outputs how many more copper ores are needed to complete the task.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Find the iron chestplate in the inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n\n  // Equip the iron chestplate\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Equipped iron chestplate.\");\n  } else {\n    bot.chat(\"Iron chestplate not found in inventory.\");\n  }\n}", "description": "async function equipIronChestplate(bot) {\n    // The function is about equipping an iron chestplate on the bot's torso. It first finds the iron chestplate in the inventory and then equips it. If the iron chestplate is not found in the inventory, it sends a message saying that it was not found.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 19 raw copper using the available coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 19);\n  bot.chat(\"19 raw copper smelted.\");\n}", "description": "async function smeltRawCopper(bot) {\n    // The function is about smelting 19 raw copper using a furnace and coal as fuel. It checks if there is a furnace in the inventory, and if not, it crafts one. Then it finds a suitable position to place the furnace and places it there. Finally, it smelts the raw copper using the furnace and coal as fuel.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Crafted an iron helmet.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function is about crafting an iron helmet using a crafting table. First, place the crafting table near the bot. Then, craft an iron helmet using the crafting table and save it to the inventory.\n}"}, "craftChest": {"code": "async function craftChest(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 8) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((8 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a chest using the crafting table\n  await craftItem(bot, \"chest\", 1);\n  bot.chat(\"Crafted a chest.\");\n}", "description": "async function craftChest(bot) {\n    // The function crafts a chest using a crafting table and oak planks. If there are not enough oak planks in the inventory, it crafts oak planks from oak logs. Once there are enough oak planks, it places a crafting table near the bot and crafts a chest using the crafting table.\n}"}, "equipIronSword": {"code": "async function equipIronSword(bot) {\n  // Find the iron sword in the inventory\n  let ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n\n  // If the iron sword is not found in the inventory, check the chest\n  if (!ironSword) {\n    const chestPosition = new Vec3(89, 41, 206);\n    const itemsToGet = {\n      \"iron_sword\": 1\n    };\n    await getItemFromChest(bot, chestPosition, itemsToGet);\n    ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  }\n\n  // Equip the iron sword\n  if (ironSword) {\n    await bot.equip(ironSword, \"hand\");\n    bot.chat(\"Equipped iron sword.\");\n  } else {\n    bot.chat(\"Iron sword not found in inventory or chest.\");\n  }\n}", "description": "async function equipIronSword(bot) {\n    // The function is about equipping an iron sword. It first checks if the iron sword is in the inventory. If not, it checks a chest for the iron sword. If the iron sword is found, it is equipped in the hand. If the iron sword is not found, a message is sent to the chat.\n}"}, "craftLightningRod": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftLightningRod(bot) {\n  // Find a suitable position to place the crafting table\n  const craftingTablePosition = await findSuitablePosition(bot);\n\n  // Place the crafting table at the found position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Check if there are enough copper ingots in the inventory\n  const copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n\n  // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n  if (copperIngotsCount < 3) {\n    await mineBlock(bot, \"copper_ore\", 3 - copperIngotsCount);\n    bot.chat(\"Collected copper ores.\");\n    await smeltItem(bot, \"copper_ore\", \"coal\", 3 - copperIngotsCount);\n    bot.chat(\"Smelted copper ores into copper ingots.\");\n  }\n\n  // Craft a lightning rod using the crafting table\n  await craftItem(bot, \"lightning_rod\", 1);\n  bot.chat(\"Crafted a lightning rod.\");\n}", "description": "async function craftLightningRod(bot) {\n    // The function is about crafting a lightning rod. It first finds a suitable position to place the crafting table and places it there. Then it checks if there are enough copper ingots in the inventory, and if not, it mines copper ores and smelts them into copper ingots. Finally, it crafts a lightning rod using the crafting table.\n}"}, "craftCopperBlock": {"code": "async function craftCopperBlock(bot) {\n  // Check if there are enough copper ingots in the inventory\n  const copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n\n  // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n  if (copperIngotsCount < 9) {\n    await mineBlock(bot, \"copper_ore\", 9 - copperIngotsCount);\n    bot.chat(\"Collected copper ores.\");\n    await smeltItem(bot, \"copper_ore\", \"coal\", 9 - copperIngotsCount);\n    bot.chat(\"Smelted copper ores into copper ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a copper block using the crafting table\n  await craftItem(bot, \"copper_block\", 1);\n  bot.chat(\"Crafted a copper block.\");\n}", "description": "async function craftCopperBlock(bot) {\n    // The function crafts a copper block using a crafting table. It first checks if there are enough copper ingots in the inventory, and if not, it mines copper ores and smelts them into copper ingots. Then it places a crafting table near the bot and crafts a copper block using the crafting table.\n}"}, "killOneSpider": {"code": "async function killOneSpider(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest spider\n  const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const spider = bot.nearestEntity(entity => {\n      return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return spider;\n  });\n  if (!spider) {\n    bot.chat(\"Could not find a spider.\");\n    return;\n  }\n\n  // Kill the spider using the iron sword\n  await killMob(bot, \"spider\", 300);\n  bot.chat(\"Killed a spider.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(spider.position.x, spider.position.y, spider.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOneSpider(bot) {\n    // The function is about killing a spider using an iron sword. First, equip the iron sword in the hand. Then, explore the environment until finding the nearest spider within 32 blocks. Once a spider is found, kill it using the iron sword. After killing the spider, collect the dropped items by moving to the spider's position.\n}"}, "killOneZombie": {"code": "async function killOneZombie(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest zombie\n  const zombie = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const zombie = bot.nearestEntity(entity => {\n      return entity.name === \"zombie\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return zombie;\n  });\n  if (!zombie) {\n    bot.chat(\"Could not find a zombie.\");\n    return;\n  }\n\n  // Kill the zombie using the iron sword\n  await killMob(bot, \"zombie\", 300);\n  bot.chat(\"Killed a zombie.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(zombie.position.x, zombie.position.y, zombie.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOneZombie(bot) {\n    // The function is about killing a single zombie using an iron sword. First, equip the iron sword in the hand. Then, explore the environment until finding the nearest zombie within 32 blocks. Once a zombie is found, kill it using the iron sword and collect the dropped items.\n}"}, "craftIronLeggingsAndBoots": {"code": "async function craftIronLeggingsAndBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 11) {\n    await mineBlock(bot, \"iron_ore\", 11 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 11 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Crafted iron leggings.\");\n\n  // Craft iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Crafted iron boots.\");\n}", "description": "async function craftIronLeggingsAndBoots(bot) {\n    // The function crafts iron leggings and boots using a crafting table. If there are not enough iron ingots in the inventory, the bot mines iron ores and smelts them into iron ingots. Then, the bot places a crafting table near itself and crafts iron leggings and boots using the crafting table.\n}"}, "equipIronArmor": {"code": "async function equipIronArmor(bot) {\n  // Find the iron_leggings, iron_boots, and iron_helmet in the inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n\n  // Equip the iron_leggings, iron_boots, and iron_helmet in the appropriate slots (legs, feet, and head)\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Equipped iron leggings.\");\n  } else {\n    bot.chat(\"Iron leggings not found in inventory.\");\n  }\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Equipped iron boots.\");\n  } else {\n    bot.chat(\"Iron boots not found in inventory.\");\n  }\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Equipped iron helmet.\");\n  } else {\n    bot.chat(\"Iron helmet not found in inventory.\");\n  }\n}", "description": "async function equipIronArmor(bot) {\n    // The function is about equipping iron armor (leggings, boots, and helmet) in the appropriate slots (legs, feet, and head) if they are available in the inventory. If any of the items are not found in the inventory, the function will output a message indicating that the item is not available.\n}"}, "craftShieldImproved": {"code": "async function craftShieldImproved(bot) {\n  // Check if there are enough oak planks in the inventory\n  let oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, check if there are enough oak logs in the inventory\n  if (oakPlanksCount < 6) {\n    let oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((6 - oakPlanksCount) / 4);\n\n    // If not, explore to find and mine oak logs\n    if (oakLogsCount < planksToCraft) {\n      await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const oak_log = bot.findBlock({\n          matching: mcData.blocksByName[\"oak_log\"].id,\n          maxDistance: 32\n        });\n        return oak_log;\n      });\n      await mineBlock(bot, \"oak_log\", planksToCraft - oakLogsCount);\n      bot.chat(\"Collected oak logs.\");\n    }\n\n    // Craft oak planks from oak logs\n    await craftItem(bot, \"oak_planks\", planksToCraft);\n    bot.chat(\"Crafted oak planks.\");\n    oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  }\n\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not, explore to find and mine iron ores\n  if (ironIngotsCount < 1) {\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"Collected iron ores.\");\n\n    // Smelt iron ores into iron ingots\n    await smeltItem(bot, \"iron_ore\", \"coal\", 1);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a shield using the crafting table\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Crafted a shield.\");\n}", "description": "async function craftShieldImproved(bot) {\n    // The function crafts a shield using oak planks and iron ingots. It checks if there are enough oak planks and iron ingots in the inventory, and if not, it explores the environment to find and collect the required materials. It then places a crafting table near the bot and crafts a shield using the crafting table.\n}"}, "craftBucket": {"code": "async function craftBucket(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 3 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a bucket using the crafting table\n  await craftItem(bot, \"bucket\", 1);\n  bot.chat(\"Crafted a bucket.\");\n}", "description": "async function craftBucket(bot) {\n    // The function crafts a bucket using a crafting table. It first checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them into iron ingots. Then, it places a crafting table near the bot and crafts a bucket using the crafting table.\n}"}, "fillBucketWithWater": {"code": "async function fillBucketWithWater(bot) {\n  // Find a water block nearby\n  const waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const water = bot.findBlock({\n      matching: mcData.blocksByName.water.id,\n      maxDistance: 32,\n    });\n    return water;\n  });\n  if (!waterBlock) {\n    bot.chat(\"Could not find water.\");\n    return;\n  }\n\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  // Go to the water block\n  await bot.pathfinder.goto(\n    new GoalGetToBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z)\n  );\n\n  // Equip the bucket\n  const bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  await bot.equip(bucket, \"hand\");\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Activate the bucket to collect water\n  await bot.activateItem();\n  bot.chat(\"Filled the bucket with water.\");\n}\n", "description": "async function fillBucketWithWater(bot) {\n    // This function fills a bucket with water by first finding a nearby water block. After locating the water block, the bot moves to it and equips the bucket in its hand. The bot then looks at the water block and activates the bucket to collect water.\n}"}, "craftIronShovel": {"code": "async function craftIronShovel(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 1) {\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"Collected iron ore.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 1);\n    bot.chat(\"Smelted iron ore into iron ingot.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Find a suitable position to place the crafting table\n  const suitablePosition = bot.entity.position.offset(1, 0, 0);\n  const block = bot.blockAt(suitablePosition);\n  if (block.name === \"grass_block\" || block.name === \"dirt\") {\n    await bot.dig(block);\n  }\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", suitablePosition);\n\n  // Craft an iron shovel using the crafting table\n  await craftItem(bot, \"iron_shovel\", 1);\n  bot.chat(\"Crafted an iron shovel.\");\n}", "description": "async function craftIronShovel(bot) {\n    // The function crafts an iron shovel using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, collects the required items. It finds a suitable position to place the crafting table and places it there. Then, it crafts an iron shovel using the crafting table.\n}"}, "obtainOneMoreAcaciaLog": {"code": "async function obtainOneMoreAcaciaLog(bot) {\n  // Check the initial inventory for acacia logs\n  const initialAcaciaLogs = bot.inventory.count(mcData.itemsByName.acacia_log.id);\n\n  // If the number of acacia logs is less than 5, find and mine one more acacia log\n  if (initialAcaciaLogs < 5) {\n    const acaciaLog = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"acacia_log\",\n        maxDistance: 32\n      });\n    });\n    if (!acaciaLog) {\n      bot.chat(\"Could not find an acacia log.\");\n      return;\n    }\n    await mineBlock(bot, \"acacia_log\", 1);\n    bot.chat(\"1 more acacia log obtained.\");\n  }\n\n  // Check the final number of acacia logs in the inventory\n  const finalAcaciaLogs = bot.inventory.count(mcData.itemsByName.acacia_log.id);\n  if (finalAcaciaLogs >= 5) {\n    bot.chat(\"Successfully obtained 5 acacia logs.\");\n  } else {\n    bot.chat(\"Failed to obtain 5 acacia logs.\");\n  }\n}", "description": "async function obtainOneMoreAcaciaLog(bot) {\n    // The function checks if there are less than 5 acacia logs in the inventory, and if so, finds and mines one more acacia log. If the bot successfully obtains 5 acacia logs, it sends a success message, otherwise it sends a failure message.\n}"}, "craftAcaciaPlanksAndSticks": {"code": "async function craftAcaciaPlanksAndSticks(bot) {\n  // Check if there are enough acacia logs in the inventory\n  const acaciaLogsCount = bot.inventory.count(mcData.itemsByName.acacia_log.id);\n\n  // If not, mine more acacia logs\n  if (acaciaLogsCount < 5) {\n    await mineBlock(bot, \"acacia_log\", 5 - acaciaLogsCount);\n    bot.chat(\"Mined acacia logs.\");\n  }\n\n  // Craft 20 acacia planks from acacia logs\n  await craftItem(bot, \"acacia_planks\", 5);\n  bot.chat(\"Crafted 20 acacia planks.\");\n\n  // Check if there are enough acacia planks in the inventory to craft 10 sticks\n  const acaciaPlanksCount = bot.inventory.count(mcData.itemsByName.acacia_planks.id);\n\n  // If not, mine more acacia logs and craft more acacia planks\n  if (acaciaPlanksCount < 5) {\n    await mineBlock(bot, \"acacia_log\", 5 - acaciaLogsCount);\n    bot.chat(\"Mined more acacia logs.\");\n    await craftItem(bot, \"acacia_planks\", 5 - acaciaPlanksCount);\n    bot.chat(\"Crafted more acacia planks.\");\n  }\n\n  // Craft 10 sticks from acacia planks\n  await craftItem(bot, \"stick\", 3);\n  bot.chat(\"Crafted 10 sticks.\");\n}", "description": "async function craftAcaciaPlanksAndSticks(bot) {\n    // The function is about crafting 20 acacia planks and 10 sticks. It checks if there are enough acacia logs in the inventory, and if not, it mines more acacia logs. Then it crafts 20 acacia planks from the acacia logs. If there are not enough acacia planks in the inventory to craft 10 sticks, it mines more acacia logs and crafts more acacia planks. Finally, it crafts 10 sticks from the acacia planks.\n}"}, "eatTwoCookedMutton": {"code": "async function eatTwoCookedMutton(bot) {\n  // Check if there are 2 cooked mutton in the inventory\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_mutton.id);\n  if (!cookedMutton || cookedMutton.count < 2) {\n    bot.chat(\"Not enough cooked mutton in the inventory.\");\n    return;\n  }\n\n  // Equip the cooked mutton in the bot's hand\n  await bot.equip(cookedMutton, \"hand\");\n\n  // Consume the cooked mutton twice\n  await bot.consume();\n  await bot.consume();\n\n  // Send a chat message to indicate the task is completed\n  bot.chat(\"Ate 2 cooked mutton.\");\n}", "description": "async function eatTwoCookedMutton(bot) {\n    // The function is about eating two cooked muttons. It checks if there are at least 2 cooked muttons in the inventory, and if not, it returns. If there are 2 or more cooked muttons, it equips one in the bot's hand and consumes it twice. Finally, it sends a chat message to indicate that the task is completed.\n}"}, "collectBamboo": {"code": "async function collectBamboo(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find bamboo plants using the exploreUntil function\n  const bambooPlants = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const bambooPlants = bot.findBlocks({\n      matching: block => block.name === \"bamboo\",\n      maxDistance: 32,\n      count: 10\n    });\n    return bambooPlants.length >= 10 ? bambooPlants : null;\n  });\n  if (!bambooPlants) {\n    bot.chat(\"Could not find enough bamboo plants.\");\n    return;\n  }\n\n  // Break 10 bamboo plants using the iron sword\n  for (const bambooPlant of bambooPlants) {\n    const block = bot.blockAt(bambooPlant);\n    await bot.dig(block);\n  }\n  bot.chat(\"Broke 10 bamboo plants.\");\n\n  // Collect the dropped bamboo items\n  for (const bambooPlant of bambooPlants) {\n    await bot.pathfinder.goto(new GoalBlock(bambooPlant.x, bambooPlant.y, bambooPlant.z));\n  }\n  bot.chat(\"Collected 10 bamboo.\");\n}", "description": "async function collectBamboo(bot) {\n    // The function is about collecting 10 bamboo plants. It equips the iron sword and uses the `exploreUntil` function to find 10 bamboo plants within a certain distance. If enough bamboo plants are found, it breaks them using the iron sword and collects the dropped bamboo items by moving to their location. If not enough bamboo plants are found, it returns an error message.\n}"}, "craftScaffolding": {"code": "async function craftScaffolding(bot) {\n  // Check if we have a crafting table in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 10 scaffolding using the crafting table\n  await craftItem(bot, \"scaffolding\", 1);\n  bot.chat(\"Crafted 10 scaffolding.\");\n}", "description": "async function craftScaffolding(bot) {\n    // The function is about crafting 10 scaffolding using a crafting table. First, it checks if there is a crafting table in the inventory. If not, it crafts one. Then, it places the crafting table near the bot. After that, it crafts 10 scaffolding using the crafting table and saves the event.\n}"}, "collectFiveCactusBlocks": {"code": "async function collectFiveCactusBlocks(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 cactus blocks using the exploreUntil function\n  const cactusBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const cactusBlocks = bot.findBlocks({\n      matching: block => block.name === \"cactus\",\n      maxDistance: 32,\n      count: 5\n    });\n    return cactusBlocks.length >= 5 ? cactusBlocks : null;\n  });\n  if (!cactusBlocks) {\n    bot.chat(\"Could not find enough cactus blocks.\");\n    return;\n  }\n\n  // Mine the 5 cactus blocks using the mineBlock function\n  await mineBlock(bot, \"cactus\", 5);\n  bot.chat(\"5 cactus blocks mined.\");\n\n  // Collect the dropped cactus items\n  for (const cactusBlock of cactusBlocks) {\n    await bot.pathfinder.goto(new GoalBlock(cactusBlock.x, cactusBlock.y, cactusBlock.z));\n  }\n  bot.chat(\"Collected 5 cactus blocks.\");\n}", "description": "async function collectFiveCactusBlocks(bot) {\n    // The function is about collecting 5 cactus blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 cactus blocks using the `exploreUntil` function. If 5 cactus blocks are not found, return. Otherwise, mine the 5 cactus blocks using the `mineBlock` function. Finally, collect the dropped cactus items by moving to each block's location.\n}"}, "smeltCactusIntoGreenDye": {"code": "async function smeltCactusIntoGreenDye(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 5 cactus using the available coal as fuel\n  await smeltItem(bot, \"cactus\", \"coal\", 5);\n  bot.chat(\"5 cactus smelted into green dye.\");\n}", "description": "async function smeltCactusIntoGreenDye(bot) {\n    // The function is about smelting 5 cactus into green dye using a furnace and coal as fuel. It checks if there is a furnace in the inventory, and if not, it crafts one. Then it finds a suitable position to place the furnace and places it there. Finally, it smelts the cactus using coal as fuel and saves the event of smelting 5 cactus into green dye.\n}"}, "craftShears": {"code": "async function craftShears(bot) {\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a pair of shears using the crafting table\n  await craftItem(bot, \"shears\", 1);\n  bot.chat(\"Crafted a pair of shears.\");\n}", "description": "async function craftShears(bot) {\n    // The function is about crafting a pair of shears. First, place a crafting table near the bot. Then, craft a pair of shears using the crafting table. Finally, the bot will chat that it has crafted a pair of shears.\n}"}}