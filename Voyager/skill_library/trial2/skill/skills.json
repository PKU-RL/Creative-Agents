{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const logBlock = bot.findBlock({\n    matching: block => logNames.includes(block.name),\n    maxDistance: 32\n  });\n  if (!logBlock) {\n    bot.chat(\"No wood log found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundLog = bot.findBlock({\n        matching: block => logNames.includes(block.name),\n        maxDistance: 32\n      });\n      return foundLog;\n    });\n  }\n  await mineBlock(bot, logBlock.name, 1);\n  bot.chat(\"Wood log mined.\");\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a single wood log. It first searches for a nearby wood log within a certain distance. If it cannot find one, it explores the environment until it finds a wood log. Once a wood log is found, it mines it and saves the event of mining the wood log.\n}"}, "craftWoodenPlanks": {"code": "async function craftWoodenPlanks(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n  const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n  if (!logInInventory) {\n    bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n    await mineWoodLog(bot);\n  }\n  const logIndex = logNames.indexOf(logInInventory);\n  const plankName = plankNames[logIndex];\n  bot.chat(`Crafting 4 ${plankName}...`);\n  await craftItem(bot, plankName, 1);\n  bot.chat(`4 ${plankName} crafted.`);\n}", "description": "async function craftWoodenPlanks(bot) {\n    // The function crafts 4 wooden planks using any type of wooden log available in the inventory. If there is no wooden log in the inventory, it will mine one. It then finds the index of the log in the `logNames` array and uses that index to determine the corresponding plank name in the `plankNames` array. Finally, it crafts 4 planks of the corresponding type and saves the event.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  const requiredPlanks = 3;\n  const requiredSticks = 2;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Crafting more...\");\n    await craftItem(bot, \"spruce_planks\", requiredPlanks - planksCount);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  bot.chat(\"Crafting_table placed.\");\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Wooden pickaxe crafted.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe by checking if there are enough spruce planks and sticks in the inventory, and crafting more if necessary. It then places a crafting table and crafts a wooden pickaxe using the newly crafted items.\n}"}, "mineCopperOreWithStonePickaxe": {"code": "async function mineCopperOreWithStonePickaxe(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found. Mining cobblestone and crafting one...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  const copperOreBlock = bot.findBlock({\n    matching: mcData.blocksByName.copper_ore.id,\n    maxDistance: 32\n  });\n  if (!copperOreBlock) {\n    bot.chat(\"No copper ore found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCopperOre = bot.findBlock({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32\n      });\n      return foundCopperOre;\n    });\n  }\n  await mineBlock(bot, \"copper_ore\", 1);\n  bot.chat(\"Copper ore mined.\");\n}", "description": "async function mineCopperOreWithStonePickaxe(bot) {\n    // The function is about mining a single copper ore block using a stone pickaxe. If the stone pickaxe is not in the inventory, the bot will mine 3 cobblestone blocks and craft a stone pickaxe. Once the stone pickaxe is available, it will be equipped in the hand. The bot will then explore the environment until finding a copper ore block. Once a copper ore block is found, the bot will mine it and save the event.\n}"}, "craftSticks": {"code": "async function craftSticks(bot) {\n  const requiredPlanks = 2;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Mining a spruce_log and crafting more...\");\n    await mineBlock(bot, \"spruce_log\", 1);\n    await craftItem(bot, \"spruce_planks\", 1);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  bot.chat(\"Crafting_table placed.\");\n  await craftItem(bot, \"stick\", 1);\n  bot.chat(\"4 sticks crafted.\");\n}", "description": "async function craftSticks(bot) {\n    // The function crafts 4 sticks using a crafting table. If there are not enough spruce planks, it mines a spruce log and crafts the planks. Then, it places a crafting table next to the bot and crafts 4 sticks.\n}"}, "chopSpruceLogs": {"code": "async function chopSpruceLogs(bot) {\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = 3 - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Chopping down spruce logs...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Chopped down 3 spruce logs.\");\n  } else {\n    bot.chat(\"Already have 3 spruce logs in inventory.\");\n  }\n}", "description": "async function chopSpruceLogs(bot) {\n    // The function is about chopping down spruce logs until there are 3 in the inventory. It first checks how many spruce logs are in the inventory and calculates how many more need to be mined. If there are less than 3, it mines the remaining logs and saves them in the inventory. If there are already 3 logs in the inventory, it does nothing.\n}"}, "chopDownSpruceLogs": {"code": "async function chopDownSpruceLogs(bot) {\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = 5 - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Chopping down spruce logs...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Chopped down 5 spruce logs.\");\n  } else {\n    bot.chat(\"Already have 5 spruce logs in inventory.\");\n  }\n}", "description": "async function chopDownSpruceLogs(bot) {\n    // The function is about chopping down spruce logs until there are 5 in the inventory. It first checks how many spruce logs are in the inventory and calculates how many more need to be mined. If there are less than 5, it mines the remaining amount and saves the event. If there are already 5 spruce logs in the inventory, it does nothing.\n}"}, "craftTwentySprucePlanks": {"code": "async function craftTwentySprucePlanks(bot) {\n  const requiredLogs = 5;\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = requiredLogs - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Not enough spruce logs. Chopping down more...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Spruce logs chopped down.\");\n  }\n  bot.chat(\"Crafting 20 spruce planks...\");\n  await craftItem(bot, \"spruce_planks\", requiredLogs);\n  bot.chat(\"20 spruce planks crafted.\");\n}", "description": "async function craftTwentySprucePlanks(bot) {\n    // The function crafts 20 spruce planks using spruce logs. If there are not enough spruce logs in the inventory, it will mine the required amount. Once enough logs are available, it will craft 20 spruce planks and save the event.\n}"}, "mineCoalOre": {"code": "async function mineCoalOre(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found in inventory.\");\n    return;\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  const coalOreBlock = bot.findBlock({\n    matching: mcData.blocksByName.coal_ore.id,\n    maxDistance: 32\n  });\n  if (!coalOreBlock) {\n    bot.chat(\"No coal ore found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCoalOre = bot.findBlock({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32\n      });\n      return foundCoalOre;\n    });\n  }\n  await mineBlock(bot, \"coal_ore\", 1);\n  bot.chat(\"Coal ore mined.\");\n}", "description": "async function mineCoalOre(bot) {\n    // The function is about mining a single coal ore block using a stone pickaxe. First, it checks if a stone pickaxe is in the inventory. If not, it returns. If the stone pickaxe is available, it equips it in the hand. Next, it searches for a nearby coal ore block. If it is not found, it explores the environment until it finds one. Once a coal ore block is found, it mines it and sends a message to the chat.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  const requiredCobblestones = 8;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones to craft a furnace.\");\n    return;\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Furnace crafted.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function crafts a furnace using 8 cobblestones and a crafting table. If there are not enough cobblestones, the function will return. If there is no crafting table nearby, the function will place one. Finally, the function crafts a furnace and sends a chat message.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 7;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineCoalOre(bot);\n  }\n  await smeltItem(bot, \"raw_copper\", \"coal\", 7);\n  bot.chat(\"7 raw copper smelted.\");\n}", "description": "async function smeltRawCopper(bot) {\n    // The function is about smelting 7 raw copper using a furnace and coal. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. Then it places the furnace next to the bot and checks if there is coal ore nearby. If there is not enough coal in the inventory, it mines more coal ore. Finally, it smelts 7 raw copper using the furnace and coal.\n}"}, "mineFiveCoalOres": {"code": "async function mineFiveCoalOres(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found in inventory.\");\n    return;\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}", "description": "async function mineFiveCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, check if a stone pickaxe is in the inventory. If not, return. If the stone pickaxe is available, equip the stone pickaxe in the hand. Next, mine a total of 5 coal ores using the stone pickaxe. Finally, send a chat message indicating that 5 coal ores have been mined.\n}"}, "craftStoneSword": {"code": "async function craftStoneSword(bot) {\n  const requiredCobblestones = 2;\n  const requiredSticks = 1;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftSticks(bot);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_sword\", 1);\n  bot.chat(\"Stone sword crafted.\");\n}", "description": "async function craftStoneSword(bot) {\n    // The function crafts a stone sword using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone sword and logs a message.\n}"}, "mineThreeIronOres": {"code": "async function mineThreeIronOres(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found. Mining cobblestone and crafting one...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  const ironOreBlock = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const foundIronOre = bot.findBlock({\n      matching: mcData.blocksByName.iron_ore.id,\n      maxDistance: 32\n    });\n    return foundIronOre;\n  });\n  if (!ironOreBlock) {\n    bot.chat(\"No iron ore found nearby. Exploring...\");\n  }\n  await mineBlock(bot, \"iron_ore\", 3);\n  bot.chat(\"3 iron ores mined.\");\n}", "description": "async function mineThreeIronOres(bot) {\n    // The function is about mining 3 iron ores using a stone pickaxe. If the stone pickaxe is not in the inventory, the bot will mine cobblestone and craft one. Once the stone pickaxe is available, it will be equipped in the hand. The bot will explore the environment until finding an iron ore block. Once an iron ore block is found, the bot will mine a total of 3 iron ores using the stone pickaxe.\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 3;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n  bot.chat(\"3 raw iron smelted.\");\n}", "description": "async function smeltRawIron(bot) {\n    // The function is about smelting 3 raw iron using a furnace and coal. First, it checks if there is a furnace in the inventory, and if not, it returns a message to craft one. Then, it places the furnace next to the bot. If there is coal in the inventory, it uses it to smelt the raw iron. Otherwise, it mines coal ore to obtain the required amount of coal. Finally, it smelts the raw iron and returns a message indicating that the process is complete.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  const requiredIronIngots = 3;\n  const requiredSticks = 2;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (ironIngotsCount < requiredIronIngots || sticksCount < requiredSticks) {\n    bot.chat(\"Not enough iron ingots or sticks to craft an iron pickaxe.\");\n    return;\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe using 3 iron ingots and 2 sticks. It checks if there are enough resources in the inventory to craft the pickaxe, and if not, it returns. If there is a crafting table nearby, it crafts the pickaxe. If not, it places a crafting table and then crafts the pickaxe. Finally, it sends a chat message indicating that the iron pickaxe has been crafted.\n}"}, "mineFiveCopperOres": {"code": "async function mineFiveCopperOres(bot) {\n  const copperOreCount = bot.inventory.count(mcData.itemsByName.copper_ore.id);\n  if (copperOreCount >= 5) {\n    bot.chat(\"Already have 5 copper ores in inventory.\");\n    return;\n  }\n  await bot.equip(mcData.itemsByName.iron_pickaxe.id, \"hand\");\n  await mineBlock(bot, \"copper_ore\", 5 - copperOreCount);\n  bot.chat(\"5 copper ores mined.\");\n}", "description": "async function mineFiveCopperOres(bot) {\n    // The function is about mining 5 copper ores using an iron pickaxe. It first checks if there are already 5 copper ores in the inventory, and if so, it returns. Otherwise, it equips the iron pickaxe in the hand and mines copper ores until there are 5 in the inventory. Finally, it sends a chat message indicating that 5 copper ores have been mined.\n}"}, "craftStoneAxe": {"code": "async function craftStoneAxe(bot) {\n  const requiredCobblestones = 3;\n  const requiredSticks = 2;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_axe\", 1);\n  bot.chat(\"Stone axe crafted.\");\n}", "description": "async function craftStoneAxe(bot) {\n    // The function crafts a stone axe using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone axe and sends a chat message.\n}"}, "mineFiveIronOres": {"code": "async function mineFiveIronOres(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  if (!stonePickaxe && !ironPickaxe) {\n    bot.chat(\"No stone or iron pickaxe found. Mining cobblestone and crafting a stone pickaxe...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  const pickaxeToUse = ironPickaxe || stonePickaxe;\n  await bot.equip(pickaxeToUse, \"hand\");\n  await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const foundIronOre = bot.findBlock({\n      matching: mcData.blocksByName.iron_ore.id,\n      maxDistance: 32\n    });\n    return foundIronOre;\n  });\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}", "description": "async function mineFiveIronOres(bot) {\n    // The function is about mining 5 iron ores using either a stone or iron pickaxe. If neither pickaxe is found in the inventory, the bot will mine cobblestone and craft a stone pickaxe. Once a pickaxe is available, the bot will equip it and explore the environment until finding an iron ore block. Once an iron ore block is found, the bot will mine a total of 5 iron ores using the equipped pickaxe.\n}"}, "craftTorches": {"code": "async function craftTorches(bot) {\n  const requiredCoal = 2;\n  const requiredSticks = 2;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n    bot.chat(\"Coal mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"torch\", 1);\n  bot.chat(\"8 torches crafted.\");\n}", "description": "async function craftTorches(bot) {\n    // The function crafts 8 torches using coal and sticks. It checks if there is enough coal and sticks in the inventory, and if not, it mines coal or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts 8 torches and saves the event.\n}"}, "exploreCave": {"code": "async function exploreCave(bot) {\n  const torches = bot.inventory.findInventoryItem(mcData.itemsByName.torch.id);\n  if (!torches) {\n    bot.chat(\"No torches found in inventory. Crafting torches...\");\n    await craftTorches(bot);\n  }\n  await bot.equip(mcData.itemsByName.torch.id, \"hand\");\n  const caveEntrance = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    return caveBlock;\n  });\n  if (!caveEntrance) {\n    bot.chat(\"No cave entrance found nearby.\");\n    return;\n  }\n  bot.chat(\"Cave entrance found. Exploring the cave...\");\n  await exploreUntil(bot, new Vec3(1, 0, 1), 300, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    if (caveBlock) {\n      bot.placeBlock(caveBlock, new Vec3(0, 1, 0));\n    }\n    const mob = bot.nearestEntity(entity => {\n      return entity.type === \"mob\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    if (mob) {\n      killMob(bot, mob.name, 300);\n    }\n    return null; // Continue exploring until the time limit is reached\n  });\n\n  bot.chat(\"Finished exploring the cave.\");\n}", "description": "async function exploreCave(bot) {\n    // The function is about exploring a nearby cave. First, check if there are torches in the inventory. If not, craft torches. Equip the torches in the hand and explore the environment until finding a cave entrance. Once a cave entrance is found, explore the cave by placing torches and killing mobs until the time limit is reached.\n}"}, "smeltSixRawIron": {"code": "async function smeltSixRawIron(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 6;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"raw_iron\", \"coal\", 6);\n  bot.chat(\"6 raw iron smelted.\");\n}", "description": "async function smeltSixRawIron(bot) {\n    // The function is about smelting 6 raw iron using a furnace and coal. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. It then places the furnace next to the player and checks if there is enough coal in the inventory. If there isn't, it mines coal until there are 6 pieces. Finally, it smelts 6 raw iron using the furnace and coal, and returns a message indicating that the process is complete.\n}"}, "mineLapisOre": {"code": "async function mineLapisOre(bot) {\n  const pickaxeTypes = [mcData.itemsByName.stone_pickaxe.id, mcData.itemsByName.iron_pickaxe.id, mcData.itemsByName.diamond_pickaxe.id, mcData.itemsByName.netherite_pickaxe.id];\n  let pickaxe = bot.inventory.items().find(item => pickaxeTypes.includes(item.type));\n  if (!pickaxe) {\n    bot.chat(\"No suitable pickaxe found. Mining cobblestone and crafting a stone pickaxe...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  await bot.equip(pickaxe, \"hand\");\n  const lapisOreBlock = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const foundLapisOre = bot.findBlock({\n      matching: mcData.blocksByName.lapis_ore.id,\n      maxDistance: 32\n    });\n    return foundLapisOre;\n  });\n  if (!lapisOreBlock) {\n    bot.chat(\"No lapis ore found nearby. Exploring...\");\n  }\n  await mineBlock(bot, \"lapis_ore\", 1);\n  bot.chat(\"Lapis ore mined.\");\n}", "description": "async function mineLapisOre(bot) {\n    // The function is about mining a single lapis ore block using the best available pickaxe. If the bot does not have a suitable pickaxe, it will mine cobblestone and craft a stone pickaxe. Once the pickaxe is available, it will equip it and explore the environment until finding a lapis ore block. Once a lapis ore block is found, it will mine it and save the event of mining the lapis ore.\n}"}, "craftBucket": {"code": "async function craftBucket(bot) {\n  const requiredIronIngots = 3;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots to craft a bucket.\");\n    return;\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"bucket\", 1);\n  bot.chat(\"Bucket crafted.\");\n}", "description": "async function craftBucket(bot) {\n    // The function crafts a bucket using 3 iron ingots. If there are not enough iron ingots, it returns. If there is no crafting table nearby, it places one. Then it crafts a bucket and sends a chat message.\n}"}, "craftStoneShovel": {"code": "async function craftStoneShovel(bot) {\n  const requiredCobblestones = 1;\n  const requiredSticks = 2;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_shovel\", 1);\n  bot.chat(\"Stone shovel crafted.\");\n}", "description": "async function craftStoneShovel(bot) {\n    // The function crafts a stone shovel using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone shovel and logs a message.\n}"}, "checkStonePickaxe": {"code": "async function checkStonePickaxe(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (stonePickaxe) {\n    bot.chat(\"The bot already has a stone pickaxe in its inventory.\");\n  } else {\n    bot.chat(\"The bot does not have a stone pickaxe in its inventory.\");\n  }\n}", "description": "async function checkStonePickaxe(bot) {\n    // The function checks if the bot has a stone pickaxe in its inventory and sends a chat message indicating whether it has one or not.\n}"}, "craftEightTorches": {"code": "async function craftEightTorches(bot) {\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"torch\", 1);\n  bot.chat(\"8 torches crafted.\");\n}", "description": "async function craftEightTorches(bot) {\n    // The function is about crafting 8 torches. First, it checks if there is a crafting table nearby. If not, it places one. Then, it crafts 1 torch and saves it to the inventory. Finally, it outputs a message indicating that 8 torches have been crafted.\n}"}, "craftIronPickaxeWithMaterials": {"code": "async function craftIronPickaxeWithMaterials(bot) {\n  const requiredIronIngots = 3;\n  const requiredSticks = 2;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Mining iron ores...\");\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ores mined. Smelting iron ingots...\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxeWithMaterials(bot) {\n    // The function crafts an iron pickaxe using 3 iron ingots and 2 sticks. If there are not enough iron ingots, it mines iron ores and smelts them into ingots. If there are not enough sticks, it crafts them. If there is no crafting table nearby, it places one. Finally, it crafts an iron pickaxe and logs the result.\n}"}, "craftChest": {"code": "async function craftChest(bot) {\n  const requiredPlanks = 8;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Mining a spruce_log and crafting more...\");\n    await mineBlock(bot, \"spruce_log\", 1);\n    await craftItem(bot, \"spruce_planks\", 1);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  bot.chat(\"Crafting a chest...\");\n  await craftItem(bot, \"chest\", 1);\n  bot.chat(\"Chest crafted.\");\n}", "description": "async function craftChest(bot) {\n    // The function crafts a chest using spruce planks and a crafting table. If there are not enough spruce planks, it mines a spruce log and crafts more planks. If there is no crafting table nearby, it places one. Finally, it crafts a chest and logs the event.\n}"}, "craftEightSticks": {"code": "async function craftEightSticks(bot) {\n  const requiredPlanks = 2;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Mining a spruce_log and crafting more...\");\n    await mineBlock(bot, \"spruce_log\", 1);\n    await craftItem(bot, \"spruce_planks\", 1);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stick\", 2);\n  bot.chat(\"8 sticks crafted.\");\n}", "description": "async function craftEightSticks(bot) {\n    // The function crafts 8 sticks using spruce planks. If there are not enough spruce planks, it mines a spruce log and crafts more planks. If there is no crafting table nearby, it places one. Finally, it crafts 2 sticks and repeats the process until 8 sticks are crafted.\n}"}, "exploreCaveAndGatherResources": {"code": "async function exploreCaveAndGatherResources(bot) {\n  // Equip torches\n  const torches = bot.inventory.findInventoryItem(mcData.itemsByName.torch.id);\n  if (!torches) {\n    bot.chat(\"No torches found in inventory. Crafting torches...\");\n    await craftTorches(bot);\n  }\n  await bot.equip(mcData.itemsByName.torch.id, \"hand\");\n\n  // Find a cave entrance and start exploring\n  const caveEntrance = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    return caveBlock;\n  });\n  if (!caveEntrance) {\n    bot.chat(\"No cave entrance found nearby.\");\n    return;\n  }\n  bot.chat(\"Cave entrance found. Exploring the cave...\");\n\n  // Explore the cave and gather resources\n  await exploreUntil(bot, new Vec3(1, 0, 1), 300, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    if (caveBlock) {\n      bot.placeBlock(caveBlock, new Vec3(0, 1, 0));\n    }\n    const mob = bot.nearestEntity(entity => {\n      return entity.type === \"mob\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    if (mob) {\n      killMob(bot, mob.name, 300);\n    }\n    const ores = [\"coal_ore\", \"iron_ore\", \"gold_ore\", \"diamond_ore\"];\n    for (const ore of ores) {\n      const oreBlock = bot.findBlock({\n        matching: mcData.blocksByName[ore].id,\n        maxDistance: 32\n      });\n      if (oreBlock) {\n        mineBlock(bot, ore, 1);\n      }\n    }\n    return null; // Continue exploring until the time limit is reached\n  });\n\n  bot.chat(\"Finished exploring the cave and gathering resources.\");\n}", "description": "async function exploreCaveAndGatherResources(bot) {\n    // The function is about exploring a nearby cave and gathering resources. First, equip torches and find a cave entrance. Once a cave entrance is found, explore the cave and gather resources such as coal, iron, gold, and diamond ores. While exploring, place torches to light up the cave, kill nearby mobs, and mine ores. The function will continue exploring until the time limit is reached. Finally, the function will output a message indicating that the exploration and resource gathering is finished.\n}"}, "craftWhiteBedWithExploration": {"code": "async function craftWhiteBedWithExploration(bot) {\n  // Step 1: Explore the area to find and kill sheep to collect the required wool blocks if needed\n  const requiredWool = 3;\n  const woolCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n  if (woolCount < requiredWool) {\n    bot.chat(\"Collecting wool from sheep...\");\n    for (let i = 0; i < requiredWool - woolCount; i++) {\n      const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const sheep = bot.nearestEntity(entity => {\n          return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n        });\n        return sheep;\n      });\n      if (sheep) {\n        await killMob(bot, \"sheep\");\n      } else {\n        bot.chat(\"No sheep found. Please try again later.\");\n        return;\n      }\n    }\n    bot.chat(\"Wool collected.\");\n  }\n\n  // Step 2: Craft 2 more spruce planks if needed\n  const requiredPlanks = 3;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Crafting more spruce_planks...\");\n    await craftItem(bot, \"spruce_planks\", requiredPlanks - planksCount);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n\n  // Step 3: Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n\n  // Step 4: Craft a white bed using the 3 white wool blocks and 3 spruce planks\n  bot.chat(\"Crafting a white bed...\");\n  await craftItem(bot, \"white_bed\", 1);\n  bot.chat(\"White bed crafted.\");\n}", "description": "async function craftWhiteBedWithExploration(bot) {\n    // The function crafts a white bed using 3 white wool blocks and 3 spruce planks. If there are not enough wool blocks, the bot explores the area to find and kill sheep to collect the wool. If there are not enough spruce planks, the bot crafts more. If there is no crafting table nearby, the bot places one.\n}"}, "cookMutton": {"code": "async function cookMutton(bot) {\n  const rawMuttonCount = bot.inventory.count(mcData.itemsByName.mutton.id);\n  if (rawMuttonCount < 5) {\n    bot.chat(\"Not enough raw mutton to cook. Please collect more first.\");\n    return;\n  }\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 5;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"mutton\", \"coal\", 5);\n  bot.chat(\"5 mutton cooked.\");\n}", "description": "async function cookMutton(bot) {\n    // The function is about cooking 5 raw muttons using a furnace and coal. It first checks if there are at least 5 raw muttons in the inventory, and if not, it returns a message to collect more. Then it checks if there is a furnace in the inventory, and if not, it returns a message to craft one. It places the furnace next to the player and checks if there is enough coal in the inventory. If not, it mines coal until there are 5 pieces. Finally, it smelts 5 raw muttons using coal and returns a message that 5 muttons have been cooked.\n}"}, "eatCookedMutton": {"code": "async function eatCookedMutton(bot) {\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_mutton.id);\n  await bot.equip(cookedMutton, \"hand\");\n  await bot.consume();\n  bot.chat(\"Cooked mutton eaten.\");\n}", "description": "async function eatCookedMutton(bot) {\n    // The function is about eating cooked mutton. It first checks if there is any cooked mutton in the inventory. If there is, it equips the cooked mutton in the hand and consumes it. Finally, it sends a chat message indicating that the cooked mutton has been eaten.\n}"}, "collectWaterWithBucket": {"code": "async function collectWaterWithBucket(bot) {\n  const waterBlock = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!waterBlock) {\n    bot.chat(\"No water block found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n  }\n  const bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  await bot.equip(bucket, \"hand\");\n  await bot.lookAt(waterBlock.position);\n  await bot.activateItem();\n  bot.chat(\"Water collected with bucket.\");\n}", "description": "async function collectWaterWithBucket(bot) {\n    // The function is about collecting water with a bucket. It first searches for a water block within a certain distance. If no water block is found, it explores the environment until it finds one. Once a water block is found, it equips the bucket in the hand, looks at the water block, and activates the item to collect water. Finally, it sends a chat message indicating that water has been collected.\n}"}, "craftFishingRod": {"code": "async function craftFishingRod(bot) {\n  // Check if we have enough strings\n  const requiredStrings = 2;\n  const stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n  if (stringsCount < requiredStrings) {\n    // Find and kill spiders to obtain strings\n    while (bot.inventory.count(mcData.itemsByName.string.id) < requiredStrings) {\n      bot.chat(\"Finding a spider to obtain strings...\");\n      const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const spider = bot.nearestEntity(entity => {\n          return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n        });\n        return spider;\n      });\n      if (spider) {\n        bot.chat(\"Spider found. Killing it...\");\n        await killMob(bot, \"spider\", 300);\n        bot.chat(\"Spider killed.\");\n      } else {\n        bot.chat(\"Could not find a spider. Trying again...\");\n      }\n    }\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n\n  // Craft a fishing rod using the 3 sticks and 2 strings\n  await craftItem(bot, \"fishing_rod\", 1);\n  bot.chat(\"Fishing rod crafted.\");\n}", "description": "async function craftFishingRod(bot) {\n    // The function crafts a fishing rod using 2 strings and 3 sticks. If there are not enough strings, the bot will find and kill spiders to obtain them. If a crafting table is not already placed, the bot will place one. Finally, the bot will craft a fishing rod and output a message.\n}"}, "fishInNearbyWaterSafely": {"code": "async function fishInNearbyWaterSafely(bot) {\n  // Check if the bot has a fishing rod in its inventory\n  let fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  if (!fishingRod) {\n    await craftFishingRod(bot);\n    fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  }\n\n  // Find a nearby water block\n  const waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const foundWaterBlock = bot.findBlock({\n      matching: mcData.blocksByName.water.id,\n      maxDistance: 32\n    });\n    return foundWaterBlock;\n  });\n\n  // Move to a block adjacent to the water block\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  await bot.pathfinder.goto(new GoalBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z));\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Equip the fishing rod\n  await bot.equip(fishingRod, \"hand\");\n\n  // Check for hostile mobs nearby and kill them if necessary\n  const hostileMobs = [\"zombie\", \"skeleton\", \"creeper\"];\n  for (const mobName of hostileMobs) {\n    const mob = bot.nearestEntity(entity => {\n      return entity.name === mobName && entity.position.distanceTo(bot.entity.position) < 16;\n    });\n    if (mob) {\n      await killMob(bot, mobName, 300);\n    }\n  }\n\n  // Fish in the water\n  try {\n    await bot.fish();\n    bot.chat(\"Fished in the nearby water.\");\n  } catch (error) {\n    if (error.message === \"Fishing cancelled\") {\n      bot.chat(\"Fishing was cancelled. Trying again...\");\n      await fishInNearbyWaterSafely(bot);\n    } else {\n      throw error;\n    }\n  }\n}", "description": "async function fishInNearbyWaterSafely(bot) {\n    // The function is about fishing in a nearby water block safely. It first checks if the bot has a fishing rod in its inventory, and crafts one if it doesn't. Then, it finds a nearby water block and moves to a block adjacent to it. After looking at the water block, it equips the fishing rod and checks for hostile mobs nearby, killing them if necessary. Finally, it fishes in the water and retries if the fishing is cancelled.\n}"}, "craftSpyglass": {"code": "async function craftSpyglass(bot) {\n  const requiredCopperIngots = 2;\n  const requiredAmethystShards = 1;\n  const copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n  const amethystShardsCount = bot.inventory.count(mcData.itemsByName.amethyst_shard.id);\n  if (copperIngotsCount < requiredCopperIngots || amethystShardsCount < requiredAmethystShards) {\n    bot.chat(\"Not enough copper ingots or amethyst shards to craft a spyglass.\");\n    return;\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"spyglass\", 1);\n  bot.chat(\"Spyglass crafted.\");\n}", "description": "async function craftSpyglass(bot) {\n    // The function crafts a spyglass using 2 copper ingots and 1 amethyst shard. It checks if there are enough materials in the inventory, and if not, it returns. If there is a crafting table nearby, it crafts the spyglass. If not, it places a crafting table and then crafts the spyglass. Finally, it sends a chat message indicating that the spyglass has been crafted.\n}"}, "craftWoodenHoe": {"code": "async function craftWoodenHoe(bot) {\n  const requiredPlanks = 2;\n  const requiredSticks = 2;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Crafting more...\");\n    await craftItem(bot, \"spruce_planks\", requiredPlanks - planksCount);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"wooden_hoe\", 1);\n  bot.chat(\"Wooden hoe crafted.\");\n}", "description": "async function craftWoodenHoe(bot) {\n    // The function crafts a wooden hoe using 2 spruce planks and 2 sticks. It checks if there are enough planks and sticks in the inventory, and crafts more if necessary. If there is no crafting table nearby, it places one. Finally, it crafts a wooden hoe and logs a message.\n}"}, "catchThreeFish": {"code": "async function catchThreeFish(bot) {\n  // Check if the bot has a fishing rod in its inventory\n  let fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  if (!fishingRod) {\n    await craftFishingRod(bot);\n    fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  }\n\n  // Find a nearby water block\n  let waterBlock;\n  while (!waterBlock) {\n    waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n    if (!waterBlock) {\n      bot.chat(\"No path to the water block. Trying to find another water block...\");\n    }\n  }\n\n  // Move to a block adjacent to the water block\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  await bot.pathfinder.goto(new GoalBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z));\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Equip the fishing rod\n  await bot.equip(fishingRod, \"hand\");\n\n  // Fish in the water 3 times\n  for (let i = 0; i < 3; i++) {\n    try {\n      await bot.fish();\n      bot.chat(`Fish ${i + 1} caught.`);\n    } catch (error) {\n      if (error.message === \"Fishing cancelled\") {\n        bot.chat(\"Fishing was cancelled. Trying again...\");\n        i--; // Retry the same iteration\n      } else {\n        throw error;\n      }\n    }\n  }\n}", "description": "async function catchThreeFish(bot) {\n    // The function is about catching three fish using a fishing rod. First, it checks if the bot has a fishing rod in its inventory. If not, it crafts one. Then, it finds a nearby water block and moves to a block adjacent to it. After looking at the water block, it equips the fishing rod and fishes in the water three times. If fishing is cancelled, it retries the same iteration.\n}"}, "craftShieldWithFurnace": {"code": "async function craftShieldWithFurnace(bot) {\n  const requiredIronIngots = 1;\n  const requiredSprucePlanks = 6;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sprucePlanksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Smelting iron ingots...\");\n    const furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n    if (!furnace) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n      bot.chat(\"Furnace placed.\");\n    }\n    await smeltItem(bot, \"raw_iron\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  if (sprucePlanksCount < requiredSprucePlanks) {\n    bot.chat(\"Not enough spruce planks. Crafting more...\");\n    await craftItem(bot, \"spruce_planks\", requiredSprucePlanks - sprucePlanksCount);\n    bot.chat(\"Spruce planks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Shield crafted.\");\n}", "description": "async function craftShieldWithFurnace(bot) {\n    // The function crafts a shield using a furnace and a crafting table. It checks if there are enough iron ingots and spruce planks in the inventory, and if not, it smelts iron ingots and crafts spruce planks. If a furnace or a crafting table is not nearby, it places one. Finally, it crafts a shield using the crafting table and logs a message.\n}"}, "smeltOneRawIron": {"code": "async function smeltOneRawIron(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n  bot.chat(\"1 raw iron smelted.\");\n}", "description": "async function smeltOneRawIron(bot) {\n    // The function is about smelting one raw iron using a furnace. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. It then places the furnace next to the bot and smelts one raw iron using coal as fuel. Finally, it sends a message indicating that one raw iron has been smelted.\n}"}, "craftStoneHoe": {"code": "async function craftStoneHoe(bot) {\n  const requiredCobblestones = 2;\n  const requiredSticks = 2;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_hoe\", 1);\n  bot.chat(\"Stone hoe crafted.\");\n}", "description": "async function craftStoneHoe(bot) {\n    // The function crafts a stone hoe using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone hoe and logs a message.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  const requiredCobblestones = 3;\n  const requiredSticks = 2;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Stone pickaxe crafted.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone pickaxe and sends a chat message.\n}"}, "craftSixteenTorches": {"code": "async function craftSixteenTorches(bot) {\n  const requiredSticks = 4;\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"torch\", 2);\n  bot.chat(\"16 torches crafted.\");\n}", "description": "async function craftSixteenTorches(bot) {\n    // The function crafts 16 torches using sticks and a crafting table. It checks if there are enough sticks in the inventory, and if not, crafts more. If there is no crafting table nearby, it places one. Finally, it crafts 16 torches and saves the event.\n}"}, "smeltTwentyFiveIronIngots": {"code": "async function smeltTwentyFiveIronIngots(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 25;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"raw_iron\", \"coal\", 25);\n  bot.chat(\"25 raw iron smelted.\");\n}", "description": "async function smeltTwentyFiveIronIngots(bot) {\n    // The function is about smelting 25 raw iron ingots using a furnace and coal. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. Then it places the furnace next to the bot, and checks if there is enough coal in the inventory. If there isn't, it mines coal until there are 25 pieces. Finally, it smelts 25 raw iron ingots using the furnace and coal, and returns a message indicating that the process is complete.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  const requiredIronIngots = 5;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots to craft an iron helmet.\");\n    return;\n  }\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n    // Update the craftingTable variable after placing it\n    craftingTable = bot.blockAt(craftingTablePosition);\n  }\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet using 5 iron ingots. If there are not enough iron ingots, it returns. If there is no crafting table nearby, it places one and updates the variable. Then, it crafts an iron helmet and sends a chat message.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  const requiredIronIngots = 8;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Mining iron ores...\");\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ores mined. Smelting iron ingots...\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Iron chestplate crafted.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate using iron ingots. If there are not enough iron ingots in the inventory, the bot will mine iron ores and smelt them into iron ingots. Then, the bot will search for a nearby crafting table and place one if it is not found. Finally, the bot will craft an iron chestplate and chat a message indicating that the item has been crafted.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  const requiredIronIngots = 2;\n  const requiredSticks = 1;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Mining iron ores...\");\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ores mined. Smelting iron ingots...\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Iron sword crafted.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword using 2 iron ingots and 1 stick. If there are not enough iron ingots, it mines iron ores and smelts them into ingots. If there are not enough sticks, it crafts them. It then looks for a crafting table within 32 blocks, and if it doesn't find one, it places one nearby. Finally, it crafts an iron sword and logs a message.\n}"}, "craftIronLeggingsAndBoots": {"code": "async function craftIronLeggingsAndBoots(bot) {\n  const requiredIronIngots = 11; // 7 for leggings, 4 for boots\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Mining iron ores...\");\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ores mined. Smelting iron ingots...\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Iron leggings crafted.\");\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron boots crafted.\");\n}", "description": "async function craftIronLeggingsAndBoots(bot) {\n    // The function crafts iron leggings and boots. It checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them into ingots. If there is no crafting table nearby, it places one. Finally, it crafts one pair of iron leggings and one pair of iron boots.\n}"}, "catchFiveFishSafely": {"code": "async function catchFiveFishSafely(bot) {\n  // Check if the bot has a fishing rod in its inventory\n  let fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  if (!fishingRod) {\n    await craftFishingRod(bot);\n    fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  }\n\n  // Find a nearby water block\n  let waterBlock;\n  while (!waterBlock) {\n    waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n    if (!waterBlock) {\n      bot.chat(\"No path to the water block. Trying to find another water block...\");\n    }\n  }\n\n  // Move to a block adjacent to the water block\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  await bot.pathfinder.goto(new GoalBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z));\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Equip the fishing rod\n  await bot.equip(fishingRod, \"hand\");\n\n  // Fish in the water 5 times\n  for (let i = 0; i < 5; i++) {\n    try {\n      await bot.fish();\n      bot.chat(`Fish ${i + 1} caught.`);\n    } catch (error) {\n      if (error.message === \"Fishing cancelled\") {\n        bot.chat(\"Fishing was cancelled. Trying again...\");\n        i--; // Retry the same iteration\n      } else {\n        throw error;\n      }\n    }\n  }\n}", "description": "async function catchFiveFishSafely(bot) {\n    // The function is about catching five fish safely using a fishing rod. First, it checks if the bot has a fishing rod in its inventory. If not, it crafts one. Then, it finds a nearby water block and moves to a block adjacent to it. After looking at the water block, it equips the fishing rod and fishes in the water five times. If fishing is cancelled, it retries the same iteration.\n}"}, "equipIronArmor": {"code": "async function equipIronArmor(bot) {\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Iron helmet equipped.\");\n  } else {\n    bot.chat(\"Iron helmet not found in inventory.\");\n  }\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Iron chestplate equipped.\");\n  } else {\n    bot.chat(\"Iron chestplate not found in inventory.\");\n  }\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Iron leggings equipped.\");\n  } else {\n    bot.chat(\"Iron leggings not found in inventory.\");\n  }\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Iron boots equipped.\");\n  } else {\n    bot.chat(\"Iron boots not found in inventory.\");\n  }\n}", "description": "async function equipIronArmor(bot) {\n    // The function equips the player with iron armor if it is available in the inventory. It checks for the presence of each piece of iron armor (helmet, chestplate, leggings, and boots) and equips them one by one. If a piece of armor is not found in the inventory, it sends a message to the chat indicating that it is not available.\n}"}}